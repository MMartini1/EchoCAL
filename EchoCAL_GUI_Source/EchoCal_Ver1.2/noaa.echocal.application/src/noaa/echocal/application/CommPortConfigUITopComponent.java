/*
 * Copyright (C) 2016 JGodlewski
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

package noaa.echocal.application;

import gnu.io.PortInUseException;
import gnu.io.UnsupportedCommOperationException;
import java.awt.Component;
import java.io.IOException;
import javax.swing.JOptionPane;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//noaa.echocal.application//CommPortConfigUI//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "CommPortConfigUITopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "rightSlidingSide", openAtStartup = true)
@ActionID(category = "Window", id = "noaa.echocal.application.CommPortConfigUITopComponent")
@ActionReference(path = "Menu/Tools" , position = 10)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_CommPortConfigUIAction",
        preferredID = "CommPortConfigUITopComponent"
)
@Messages({
    "CTL_CommPortConfigUIAction=Serial Port Configuration Tool",
    "CTL_CommPortConfigUITopComponent=Serial Port Configuration Tool",
    "HINT_CommPortConfigUITopComponent=This is the serial port configuration tool"
})
public final class CommPortConfigUITopComponent extends TopComponent {

    public CommPortConfigUITopComponent() {
        initComponents();
        setName("Serial Port Configuration");
        setToolTipText("<html>"+"This window should be used at program startup to configure the serial port for the USB transceiver."+"<br>"+
                       "You may refresh the serial ports with the 'refresh button' and the 'scan' button will discover and connect other"+"<br>"+
                       "EchoCal devices within the local vicinity.</html>");
        putClientProperty(TopComponent.PROP_DRAGGING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_UNDOCKING_DISABLED, Boolean.TRUE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        commPortConfigUIPanelMain = new javax.swing.JPanel();
        scanButton = new javax.swing.JButton();
        commPortCombobox = new javax.swing.JComboBox();
        dataBitsCombobox = new javax.swing.JComboBox();
        dataBitsButton = new javax.swing.JButton();
        stopBitsButton = new javax.swing.JButton();
        stopBitsCombobox = new javax.swing.JComboBox();
        parityButton = new javax.swing.JButton();
        parityCombobox = new javax.swing.JComboBox();
        baudRateButton = new javax.swing.JButton();
        baudRateCombobox = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        commPortConfigLogger = new javax.swing.JTextArea();
        refreshButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        availableDeviceList = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(scanButton, org.openide.util.NbBundle.getMessage(CommPortConfigUITopComponent.class, "CommPortConfigUITopComponent.scanButton.text")); // NOI18N
        scanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scanButtonActionPerformed(evt);
            }
        });

        commPortCombobox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select serial port..." }));
        commPortCombobox.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        dataBitsCombobox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "8" }));
        dataBitsCombobox.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        org.openide.awt.Mnemonics.setLocalizedText(dataBitsButton, org.openide.util.NbBundle.getMessage(CommPortConfigUITopComponent.class, "CommPortConfigUITopComponent.dataBitsButton.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(stopBitsButton, org.openide.util.NbBundle.getMessage(CommPortConfigUITopComponent.class, "CommPortConfigUITopComponent.stopBitsButton.text")); // NOI18N

        stopBitsCombobox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1" }));
        stopBitsCombobox.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        org.openide.awt.Mnemonics.setLocalizedText(parityButton, org.openide.util.NbBundle.getMessage(CommPortConfigUITopComponent.class, "CommPortConfigUITopComponent.parityButton.text")); // NOI18N

        parityCombobox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None" }));
        parityCombobox.setToolTipText(org.openide.util.NbBundle.getMessage(CommPortConfigUITopComponent.class, "CommPortConfigUITopComponent.parityCombobox.toolTipText")); // NOI18N
        parityCombobox.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        org.openide.awt.Mnemonics.setLocalizedText(baudRateButton, org.openide.util.NbBundle.getMessage(CommPortConfigUITopComponent.class, "CommPortConfigUITopComponent.baudRateButton.text")); // NOI18N

        baudRateCombobox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "9600" }));
        baudRateCombobox.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        commPortConfigLogger.setColumns(20);
        commPortConfigLogger.setLineWrap(true);
        commPortConfigLogger.setRows(5);
        commPortConfigLogger.setText(org.openide.util.NbBundle.getMessage(CommPortConfigUITopComponent.class, "CommPortConfigUITopComponent.commPortConfigLogger.text")); // NOI18N
        commPortConfigLogger.setWrapStyleWord(true);
        jScrollPane1.setViewportView(commPortConfigLogger);

        org.openide.awt.Mnemonics.setLocalizedText(refreshButton, org.openide.util.NbBundle.getMessage(CommPortConfigUITopComponent.class, "CommPortConfigUITopComponent.refreshButton.text")); // NOI18N
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        availableDeviceList.setColumns(20);
        availableDeviceList.setRows(5);
        availableDeviceList.setText(org.openide.util.NbBundle.getMessage(CommPortConfigUITopComponent.class, "CommPortConfigUITopComponent.availableDeviceList.text")); // NOI18N
        jScrollPane2.setViewportView(availableDeviceList);

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(CommPortConfigUITopComponent.class, "CommPortConfigUITopComponent.jButton1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jButton2, org.openide.util.NbBundle.getMessage(CommPortConfigUITopComponent.class, "CommPortConfigUITopComponent.jButton2.text")); // NOI18N

        javax.swing.GroupLayout commPortConfigUIPanelMainLayout = new javax.swing.GroupLayout(commPortConfigUIPanelMain);
        commPortConfigUIPanelMain.setLayout(commPortConfigUIPanelMainLayout);
        commPortConfigUIPanelMainLayout.setHorizontalGroup(
            commPortConfigUIPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(commPortConfigUIPanelMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(commPortConfigUIPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(commPortConfigUIPanelMainLayout.createSequentialGroup()
                        .addGroup(commPortConfigUIPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(commPortConfigUIPanelMainLayout.createSequentialGroup()
                                .addGroup(commPortConfigUIPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(baudRateButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(parityButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(stopBitsButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(dataBitsButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(refreshButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(commPortConfigUIPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(scanButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(parityCombobox, 0, 160, Short.MAX_VALUE)
                                    .addComponent(stopBitsCombobox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(dataBitsCombobox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(baudRateCombobox, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(commPortCombobox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(commPortConfigUIPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        commPortConfigUIPanelMainLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {baudRateButton, baudRateCombobox, dataBitsButton, dataBitsCombobox, parityButton, parityCombobox, refreshButton, scanButton, stopBitsButton, stopBitsCombobox});

        commPortConfigUIPanelMainLayout.setVerticalGroup(
            commPortConfigUIPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(commPortConfigUIPanelMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(commPortConfigUIPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(commPortCombobox)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(commPortConfigUIPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(commPortConfigUIPanelMainLayout.createSequentialGroup()
                        .addGroup(commPortConfigUIPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(scanButton, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                            .addComponent(refreshButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(commPortConfigUIPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(dataBitsButton, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                            .addComponent(dataBitsCombobox))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(commPortConfigUIPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(stopBitsButton, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                            .addComponent(stopBitsCombobox))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(commPortConfigUIPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(parityButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(parityCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(commPortConfigUIPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(baudRateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(baudRateCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(commPortConfigUIPanelMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(commPortConfigUIPanelMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void scanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scanButtonActionPerformed

        // Disable the scan button so that we don't get mutliple hits on scan button.
        // Make sure you enable the button again in the "ConnectionListener" thread
        // when it completes.
        scanButton.setEnabled(false);
        //Defines the name of the serial connection menu selected comm port.
        Communication.selectedCommPortTag=commPortCombobox.getSelectedItem().toString();
        //Sets transceiver lock off.
        Communication.transceiverConnectionLock = false;
        //Run the "communicateWithTransceiver" function to scan for available
        //downriggers...
        (new Thread(new ConnectionListener())).start();
        //scanButton.setEnabled(true);
        
    }//GEN-LAST:event_scanButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        //Tries to enumerate serialports.
        try 
        {
            //Enumerates serialports.
            Communication.enumerateSerialPorts();
        } 
        //If an exception is caught.
        catch (PortInUseException | UnsupportedCommOperationException | IOException ex) 
        {
            Component frame = null;
            JOptionPane.showMessageDialog(frame, "The serial ports could not be refreshed.");
        }
    }//GEN-LAST:event_refreshButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JTextArea availableDeviceList;
    private javax.swing.JButton baudRateButton;
    public static javax.swing.JComboBox baudRateCombobox;
    public static javax.swing.JComboBox commPortCombobox;
    public static javax.swing.JTextArea commPortConfigLogger;
    private javax.swing.JPanel commPortConfigUIPanelMain;
    private javax.swing.JButton dataBitsButton;
    public static javax.swing.JComboBox dataBitsCombobox;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton parityButton;
    public static javax.swing.JComboBox parityCombobox;
    private javax.swing.JButton refreshButton;
    public static javax.swing.JButton scanButton;
    private javax.swing.JButton stopBitsButton;
    public static javax.swing.JComboBox stopBitsCombobox;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        //Populate the COM Port combo box prior to opening the window...
        
        try 
        {
            //Enumerates serialports.
            Communication.enumerateSerialPorts();
        } 
        //If an exception is caught.
        catch (PortInUseException | UnsupportedCommOperationException | IOException ex) 
        {
            Component frame = null;
            JOptionPane.showMessageDialog(frame, "The serial ports could not be refreshed.");
        }
        
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
