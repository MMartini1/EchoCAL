/*
 * Copyright (C) 2016 JGodlewski
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

package noaa.echocal.application;


import gnu.io.NoSuchPortException;
import gnu.io.PortInUseException;
import gnu.io.UnsupportedCommOperationException;
import java.awt.Component;
import java.io.IOException;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//noaa.echocal.application//NavigationControls//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "NavigationControls",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "output", openAtStartup = true)
@ActionID(category = "Window", id = "noaa.echocal.application.NavigationControls")
@ActionReference(path = "Menu/Tools" , position = 40)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_NavigationControlsAction",
        preferredID = "NavigationControls"
)
@Messages({
    "CTL_NavigationControlsAction=Display Navigation Controls",
    "CTL_NavigationControls=Navigation Control Window",
    "HINT_NavigationControls=Navigation Controls"
})
public final class NavigationControls extends TopComponent{

    //X coordinate identifier.  Axis spans port to starboard. The "0" point
    //is the vessels alongship centerline.
    public static int X=0;
    //Y coordinate identifier.  Axis spans alongship.  The "0" mark depends
    //on the configuration but tends to be the port or starboard middle
    //or the transducer.
    public static int Y=1;
    //Z coordinate identifier.  Axis spans ocean floor to sky. The "0" point
    //is the ocean surface.
    public static int Z=2;
    
    //State of Navigations controls.
    public static boolean bNavControls = false;
    
    public NavigationControls() 
    {
        initComponents();
        setName("Navigation Controller");
        setToolTipText("Navigation Controller");
        putClientProperty(TopComponent.PROP_DRAGGING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_UNDOCKING_DISABLED, Boolean.TRUE);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        joystickPanel = new javax.swing.JPanel();
        forwardRightButton = new javax.swing.JButton();
        forwardButton = new javax.swing.JButton();
        forwardLeftButton = new javax.swing.JButton();
        leftButton = new javax.swing.JButton();
        aftLeftButton = new javax.swing.JButton();
        aftButton = new javax.swing.JButton();
        aftRightButton = new javax.swing.JButton();
        riseButton = new javax.swing.JButton();
        sinkButton = new javax.swing.JButton();
        rightButton = new javax.swing.JButton();
        autonavPanel = new javax.swing.JPanel();
        runCalibrationButton = new javax.swing.JButton();
        pauseCalibrationButton = new javax.swing.JButton();
        stopCalibrationButton = new javax.swing.JButton();
        updatedButton = new javax.swing.JToggleButton();
        fullBeamAngleButton = new javax.swing.JButton();
        fullBeamAngleTextfieldInput = new javax.swing.JTextField();
        calibrationProgressBar = new javax.swing.JProgressBar();
        updateButton = new javax.swing.JButton();
        navigatePositionXTextbox = new javax.swing.JTextField();
        navigatePositionYTextbox = new javax.swing.JTextField();
        navigatePositionZTextbox = new javax.swing.JTextField();
        navigateSphereToPositionButton = new javax.swing.JButton();
        portPanel = new javax.swing.JPanel();
        portForwardInButton = new javax.swing.JButton();
        portForwardOutButton = new javax.swing.JButton();
        portMiddleOutButton = new javax.swing.JButton();
        portMiddleInButton = new javax.swing.JButton();
        portAftInButton = new javax.swing.JButton();
        portAftOutButton = new javax.swing.JButton();
        starboardPanel = new javax.swing.JPanel();
        starboardForwardInButton = new javax.swing.JButton();
        starboardForwardOutButton = new javax.swing.JButton();
        starboardMiddleOutButton = new javax.swing.JButton();
        starboardMiddleInButton = new javax.swing.JButton();
        starboardAftInButton = new javax.swing.JButton();
        starboardAftOutButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        starTypeButton = new javax.swing.JToggleButton();
        spiralTypeButton = new javax.swing.JToggleButton();
        gridTypeButton = new javax.swing.JToggleButton();

        forwardRightButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/ForwardRight.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(forwardRightButton, org.openide.util.NbBundle.getMessage(NavigationControls.class, "NavigationControls.forwardRightButton.text")); // NOI18N
        forwardRightButton.setDisabledIcon(null);
        forwardRightButton.setDisabledSelectedIcon(null);
        forwardRightButton.setEnabled(false);
        forwardRightButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/ForwardRightPressed.png"))); // NOI18N
        forwardRightButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/ForwardRightHover.png"))); // NOI18N
        forwardRightButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                forwardRightButtonMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                forwardRightButtonMouseEntered(evt);
            }
        });
        forwardRightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forwardRightButtonActionPerformed(evt);
            }
        });

        forwardButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/Forward.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(forwardButton, org.openide.util.NbBundle.getMessage(NavigationControls.class, "NavigationControls.forwardButton.text")); // NOI18N
        forwardButton.setDisabledIcon(null);
        forwardButton.setDisabledSelectedIcon(null);
        forwardButton.setEnabled(false);
        forwardButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/ForwardPressed.png"))); // NOI18N
        forwardButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/ForwardHover.png"))); // NOI18N
        forwardButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                forwardButtonMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                forwardButtonMouseEntered(evt);
            }
        });
        forwardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forwardButtonActionPerformed(evt);
            }
        });

        forwardLeftButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/ForwardLeft.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(forwardLeftButton, org.openide.util.NbBundle.getMessage(NavigationControls.class, "NavigationControls.forwardLeftButton.text")); // NOI18N
        forwardLeftButton.setDisabledIcon(null);
        forwardLeftButton.setDisabledSelectedIcon(null);
        forwardLeftButton.setEnabled(false);
        forwardLeftButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/ForwardLeftPressed.png"))); // NOI18N
        forwardLeftButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/ForwardLeftHover.png"))); // NOI18N
        forwardLeftButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                forwardLeftButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                forwardLeftButtonMouseExited(evt);
            }
        });
        forwardLeftButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forwardLeftButtonActionPerformed(evt);
            }
        });

        leftButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/Left.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(leftButton, org.openide.util.NbBundle.getMessage(NavigationControls.class, "NavigationControls.leftButton.text")); // NOI18N
        leftButton.setDisabledIcon(null);
        leftButton.setDisabledSelectedIcon(null);
        leftButton.setEnabled(false);
        leftButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/LeftPressed.png"))); // NOI18N
        leftButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/LeftHover.png"))); // NOI18N
        leftButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                leftButtonMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                leftButtonMouseEntered(evt);
            }
        });
        leftButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftButtonActionPerformed(evt);
            }
        });

        aftLeftButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/AftLeft.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(aftLeftButton, org.openide.util.NbBundle.getMessage(NavigationControls.class, "NavigationControls.aftLeftButton.text")); // NOI18N
        aftLeftButton.setDisabledIcon(null);
        aftLeftButton.setDisabledSelectedIcon(null);
        aftLeftButton.setEnabled(false);
        aftLeftButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/AftLeftPressed.png"))); // NOI18N
        aftLeftButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/AftLeftHover.png"))); // NOI18N
        aftLeftButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                aftLeftButtonMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                aftLeftButtonMouseEntered(evt);
            }
        });
        aftLeftButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aftLeftButtonActionPerformed(evt);
            }
        });

        aftButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/Aft.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(aftButton, org.openide.util.NbBundle.getMessage(NavigationControls.class, "NavigationControls.aftButton.text")); // NOI18N
        aftButton.setDisabledIcon(null);
        aftButton.setDisabledSelectedIcon(null);
        aftButton.setEnabled(false);
        aftButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/AftPressed.png"))); // NOI18N
        aftButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/AftHover.png"))); // NOI18N
        aftButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                aftButtonMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                aftButtonMouseEntered(evt);
            }
        });
        aftButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aftButtonActionPerformed(evt);
            }
        });

        aftRightButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/AftRight.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(aftRightButton, org.openide.util.NbBundle.getMessage(NavigationControls.class, "NavigationControls.text")); // NOI18N
        aftRightButton.setEnabled(false);
        aftRightButton.setName(""); // NOI18N
        aftRightButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/AftRightPressed.png"))); // NOI18N
        aftRightButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/AftRightHover.png"))); // NOI18N
        aftRightButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                aftRightButtonMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                aftRightButtonMouseEntered(evt);
            }
        });
        aftRightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aftRightButtonActionPerformed(evt);
            }
        });

        riseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/Rise.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(riseButton, org.openide.util.NbBundle.getMessage(NavigationControls.class, "NavigationControls.riseButton.text")); // NOI18N
        riseButton.setDisabledIcon(null);
        riseButton.setDisabledSelectedIcon(null);
        riseButton.setEnabled(false);
        riseButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/RisePressed.png"))); // NOI18N
        riseButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/RiseHover.png"))); // NOI18N
        riseButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                riseButtonMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                riseButtonMouseEntered(evt);
            }
        });
        riseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                riseButtonActionPerformed(evt);
            }
        });

        sinkButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/Sink.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(sinkButton, org.openide.util.NbBundle.getMessage(NavigationControls.class, "NavigationControls.sinkButton.text")); // NOI18N
        sinkButton.setDisabledIcon(null);
        sinkButton.setDisabledSelectedIcon(null);
        sinkButton.setEnabled(false);
        sinkButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/SinkPressed.png"))); // NOI18N
        sinkButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/SinkHover.png"))); // NOI18N
        sinkButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                sinkButtonMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                sinkButtonMouseEntered(evt);
            }
        });
        sinkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sinkButtonActionPerformed(evt);
            }
        });

        rightButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/Right.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(rightButton, org.openide.util.NbBundle.getMessage(NavigationControls.class, "NavigationControls.rightButton.text")); // NOI18N
        rightButton.setDisabledIcon(null);
        rightButton.setDisabledSelectedIcon(null);
        rightButton.setEnabled(false);
        rightButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/RightPressed.png"))); // NOI18N
        rightButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/RightHover.png"))); // NOI18N
        rightButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                rightButtonMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                rightButtonMouseEntered(evt);
            }
        });
        rightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout joystickPanelLayout = new javax.swing.GroupLayout(joystickPanel);
        joystickPanel.setLayout(joystickPanelLayout);
        joystickPanelLayout.setHorizontalGroup(
            joystickPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(joystickPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(joystickPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(forwardLeftButton, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                    .addComponent(leftButton, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                    .addComponent(aftLeftButton, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(joystickPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(joystickPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, joystickPanelLayout.createSequentialGroup()
                            .addComponent(riseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(sinkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, Short.MAX_VALUE))
                        .addComponent(aftButton, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE))
                    .addComponent(forwardButton, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(joystickPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(forwardRightButton, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                    .addComponent(aftRightButton, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                    .addComponent(rightButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        joystickPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {aftButton, aftLeftButton, aftRightButton, forwardLeftButton, forwardRightButton, leftButton});

        joystickPanelLayout.setVerticalGroup(
            joystickPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(joystickPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(joystickPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(forwardLeftButton, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                    .addComponent(forwardButton, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                    .addComponent(forwardRightButton, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(joystickPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(leftButton, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                    .addComponent(riseButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sinkButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rightButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(joystickPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aftLeftButton, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                    .addComponent(aftButton, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                    .addComponent(aftRightButton, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        joystickPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {aftButton, aftLeftButton, aftRightButton, forwardButton, forwardLeftButton, forwardRightButton, leftButton});

        runCalibrationButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(runCalibrationButton, org.openide.util.NbBundle.getMessage(NavigationControls.class, "NavigationControls.runCalibrationButton.text")); // NOI18N
        runCalibrationButton.setEnabled(false);
        runCalibrationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runCalibrationButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(pauseCalibrationButton, org.openide.util.NbBundle.getMessage(NavigationControls.class, "NavigationControls.pauseCalibrationButton.text")); // NOI18N
        pauseCalibrationButton.setEnabled(false);
        pauseCalibrationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseCalibrationButtonActionPerformed(evt);
            }
        });

        stopCalibrationButton.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(stopCalibrationButton, org.openide.util.NbBundle.getMessage(NavigationControls.class, "NavigationControls.stopCalibrationButton.text")); // NOI18N
        stopCalibrationButton.setEnabled(false);
        stopCalibrationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopCalibrationButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(updatedButton, org.openide.util.NbBundle.getMessage(NavigationControls.class, "NavigationControls.updatedButton.text")); // NOI18N
        updatedButton.setToolTipText(org.openide.util.NbBundle.getMessage(NavigationControls.class, "NavigationControls.updatedButton.toolTipText")); // NOI18N
        updatedButton.setEnabled(false);
        updatedButton.setIconTextGap(1);
        updatedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatedButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(fullBeamAngleButton, org.openide.util.NbBundle.getMessage(NavigationControls.class, "NavigationControls.fullBeamAngleButton.text")); // NOI18N
        fullBeamAngleButton.setEnabled(false);
        fullBeamAngleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fullBeamAngleButtonActionPerformed(evt);
            }
        });

        fullBeamAngleTextfieldInput.setText(org.openide.util.NbBundle.getMessage(NavigationControls.class, "NavigationControls.fullBeamAngleTextfieldInput.text")); // NOI18N
        fullBeamAngleTextfieldInput.setEnabled(false);

        calibrationProgressBar.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(updateButton, org.openide.util.NbBundle.getMessage(NavigationControls.class, "NavigationControls.updateButton.text")); // NOI18N
        updateButton.setEnabled(false);
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        navigatePositionXTextbox.setText(org.openide.util.NbBundle.getMessage(NavigationControls.class, "NavigationControls.navigatePositionXTextbox.text")); // NOI18N
        navigatePositionXTextbox.setEnabled(false);
        navigatePositionXTextbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                navigatePositionXTextboxActionPerformed(evt);
            }
        });

        navigatePositionYTextbox.setText(org.openide.util.NbBundle.getMessage(NavigationControls.class, "NavigationControls.navigatePositionYTextbox.text")); // NOI18N
        navigatePositionYTextbox.setEnabled(false);

        navigatePositionZTextbox.setText(org.openide.util.NbBundle.getMessage(NavigationControls.class, "NavigationControls.navigatePositionZTextbox.text")); // NOI18N
        navigatePositionZTextbox.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(navigateSphereToPositionButton, org.openide.util.NbBundle.getMessage(NavigationControls.class, "NavigationControls.navigateSphereToPositionButton.text")); // NOI18N
        navigateSphereToPositionButton.setEnabled(false);
        navigateSphereToPositionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                navigateSphereToPositionButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout autonavPanelLayout = new javax.swing.GroupLayout(autonavPanel);
        autonavPanel.setLayout(autonavPanelLayout);
        autonavPanelLayout.setHorizontalGroup(
            autonavPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(autonavPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(autonavPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(autonavPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(calibrationProgressBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, autonavPanelLayout.createSequentialGroup()
                            .addGroup(autonavPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(autonavPanelLayout.createSequentialGroup()
                                    .addComponent(runCalibrationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(pauseCalibrationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(fullBeamAngleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(autonavPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(stopCalibrationButton, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                                .addComponent(fullBeamAngleTextfieldInput))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(autonavPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(updatedButton, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
                                .addComponent(updateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(autonavPanelLayout.createSequentialGroup()
                        .addComponent(navigatePositionXTextbox, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(navigatePositionYTextbox, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(navigatePositionZTextbox, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(navigateSphereToPositionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        autonavPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {fullBeamAngleTextfieldInput, pauseCalibrationButton, runCalibrationButton, stopCalibrationButton, updateButton, updatedButton});

        autonavPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {navigatePositionXTextbox, navigatePositionYTextbox, navigatePositionZTextbox});

        autonavPanelLayout.setVerticalGroup(
            autonavPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(autonavPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(autonavPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(stopCalibrationButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                    .addComponent(pauseCalibrationButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                    .addComponent(updatedButton, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                    .addComponent(runCalibrationButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(autonavPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(fullBeamAngleButton, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(fullBeamAngleTextfieldInput)
                    .addComponent(updateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(calibrationProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(navigateSphereToPositionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(autonavPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(navigatePositionXTextbox)
                    .addComponent(navigatePositionYTextbox)
                    .addComponent(navigatePositionZTextbox))
                .addContainerGap())
        );

        autonavPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {calibrationProgressBar, fullBeamAngleButton});

        org.openide.awt.Mnemonics.setLocalizedText(portForwardInButton, org.openide.util.NbBundle.getMessage(NavigationControls.class, "NavigationControls.portForwardInButton.text")); // NOI18N
        portForwardInButton.setEnabled(false);
        portForwardInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portForwardInButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(portForwardOutButton, org.openide.util.NbBundle.getMessage(NavigationControls.class, "NavigationControls.portForwardOutButton.text")); // NOI18N
        portForwardOutButton.setEnabled(false);
        portForwardOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portForwardOutButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(portMiddleOutButton, org.openide.util.NbBundle.getMessage(NavigationControls.class, "NavigationControls.portMiddleOutButton.text")); // NOI18N
        portMiddleOutButton.setEnabled(false);
        portMiddleOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portMiddleOutButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(portMiddleInButton, org.openide.util.NbBundle.getMessage(NavigationControls.class, "NavigationControls.portMiddleInButton.text")); // NOI18N
        portMiddleInButton.setEnabled(false);
        portMiddleInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portMiddleInButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(portAftInButton, org.openide.util.NbBundle.getMessage(NavigationControls.class, "NavigationControls.portAftInButton.text")); // NOI18N
        portAftInButton.setEnabled(false);
        portAftInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portAftInButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(portAftOutButton, org.openide.util.NbBundle.getMessage(NavigationControls.class, "NavigationControls.portAftOutButton.text")); // NOI18N
        portAftOutButton.setEnabled(false);
        portAftOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portAftOutButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout portPanelLayout = new javax.swing.GroupLayout(portPanel);
        portPanel.setLayout(portPanelLayout);
        portPanelLayout.setHorizontalGroup(
            portPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(portPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(portPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(portForwardInButton, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                    .addComponent(portMiddleInButton, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                    .addComponent(portAftInButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(portPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(portAftOutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(portMiddleOutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(portForwardOutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        portPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {portAftOutButton, portForwardInButton, portForwardOutButton, portMiddleInButton, portMiddleOutButton});

        portPanelLayout.setVerticalGroup(
            portPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(portPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(portPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(portForwardInButton, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                    .addComponent(portForwardOutButton, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(portPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(portMiddleInButton, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                    .addComponent(portMiddleOutButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(portPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(portAftOutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(portAftInButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        portPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {portAftInButton, portAftOutButton, portForwardInButton, portForwardOutButton, portMiddleInButton, portMiddleOutButton});

        starboardPanel.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(starboardForwardInButton, org.openide.util.NbBundle.getMessage(NavigationControls.class, "NavigationControls.starboardForwardInButton.text")); // NOI18N
        starboardForwardInButton.setEnabled(false);
        starboardForwardInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                starboardForwardInButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(starboardForwardOutButton, org.openide.util.NbBundle.getMessage(NavigationControls.class, "NavigationControls.starboardForwardOutButton.text")); // NOI18N
        starboardForwardOutButton.setEnabled(false);
        starboardForwardOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                starboardForwardOutButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(starboardMiddleOutButton, org.openide.util.NbBundle.getMessage(NavigationControls.class, "NavigationControls.starboardMiddleOutButton.text")); // NOI18N
        starboardMiddleOutButton.setEnabled(false);
        starboardMiddleOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                starboardMiddleOutButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(starboardMiddleInButton, org.openide.util.NbBundle.getMessage(NavigationControls.class, "NavigationControls.starboardMiddleInButton.text")); // NOI18N
        starboardMiddleInButton.setEnabled(false);
        starboardMiddleInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                starboardMiddleInButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(starboardAftInButton, org.openide.util.NbBundle.getMessage(NavigationControls.class, "NavigationControls.starboardAftInButton.text")); // NOI18N
        starboardAftInButton.setEnabled(false);
        starboardAftInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                starboardAftInButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(starboardAftOutButton, org.openide.util.NbBundle.getMessage(NavigationControls.class, "NavigationControls.starboardAftOutButton.text")); // NOI18N
        starboardAftOutButton.setEnabled(false);
        starboardAftOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                starboardAftOutButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout starboardPanelLayout = new javax.swing.GroupLayout(starboardPanel);
        starboardPanel.setLayout(starboardPanelLayout);
        starboardPanelLayout.setHorizontalGroup(
            starboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(starboardPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(starboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(starboardForwardInButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(starboardMiddleInButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(starboardAftInButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(starboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(starboardForwardOutButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(starboardMiddleOutButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(starboardAftOutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        starboardPanelLayout.setVerticalGroup(
            starboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(starboardPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(starboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(starboardForwardOutButton, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                    .addComponent(starboardForwardInButton, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(starboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(starboardMiddleOutButton, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                    .addComponent(starboardMiddleInButton, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(starboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(starboardAftInButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(starboardAftOutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        starTypeButton.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N
        starTypeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/StarAutoCalibrationSymbol.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(starTypeButton, org.openide.util.NbBundle.getMessage(NavigationControls.class, "NavigationControls.starTypeButton.text")); // NOI18N
        starTypeButton.setEnabled(false);
        starTypeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                starTypeButtonActionPerformed(evt);
            }
        });

        spiralTypeButton.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N
        spiralTypeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/SpiralAutoCalibrationSymbol.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(spiralTypeButton, org.openide.util.NbBundle.getMessage(NavigationControls.class, "NavigationControls.spiralTypeButton.text")); // NOI18N
        spiralTypeButton.setEnabled(false);
        spiralTypeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spiralTypeButtonActionPerformed(evt);
            }
        });

        gridTypeButton.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N
        gridTypeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/GridAutoCalibrationSymbol.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(gridTypeButton, org.openide.util.NbBundle.getMessage(NavigationControls.class, "NavigationControls.gridTypeButton.text")); // NOI18N
        gridTypeButton.setEnabled(false);
        gridTypeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gridTypeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(starTypeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(spiralTypeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(gridTypeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(starTypeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spiralTypeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gridTypeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(portPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(joystickPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(starboardPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(autonavPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(portPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(autonavPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(joystickPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(starboardPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    public static void enableNavigationControls()
    {
        forwardRightButton.setEnabled(true);
        forwardButton.setEnabled(true);
        forwardLeftButton.setEnabled(true);
        leftButton.setEnabled(true);
        aftLeftButton.setEnabled(true);
        aftButton.setEnabled(true);
        aftRightButton.setEnabled(true);
        riseButton.setEnabled(true);
        sinkButton.setEnabled(true);
        rightButton.setEnabled(true);
        
        runCalibrationButton.setEnabled(true);
        pauseCalibrationButton.setEnabled(false);
        stopCalibrationButton.setEnabled(false);
        updatedButton.setEnabled(true);
        fullBeamAngleButton.setEnabled(true);
        fullBeamAngleTextfieldInput.setEnabled(true);
        calibrationProgressBar.setEnabled(true);
        updateButton.setEnabled(true);
        navigatePositionXTextbox.setEnabled(true);
        navigatePositionYTextbox.setEnabled(true);
        navigatePositionZTextbox.setEnabled(true);
        navigateSphereToPositionButton.setEnabled(true);
        
        starTypeButton.setEnabled(true);
        spiralTypeButton.setEnabled(true);
        gridTypeButton.setEnabled(true);
        
        portForwardInButton.setEnabled(true);
        portForwardOutButton.setEnabled(true);
        portMiddleInButton.setEnabled(true);
        portMiddleOutButton.setEnabled(true);
        portAftInButton.setEnabled(true);
        portAftOutButton.setEnabled(true);

        starboardForwardInButton.setEnabled(true);
        starboardForwardOutButton.setEnabled(true);
        starboardMiddleInButton.setEnabled(true);
        starboardMiddleOutButton.setEnabled(true);
        starboardAftInButton.setEnabled(true);
        starboardAftOutButton.setEnabled(true);
        //Flag that shows that the navigation controls are active..
        bNavControls = true;
    }
    
    public static void disableNavigationControls()
    {
        forwardRightButton.setEnabled(false);
        forwardButton.setEnabled(false);
        forwardLeftButton.setEnabled(false);
        leftButton.setEnabled(false);
        aftLeftButton.setEnabled(false);
        aftButton.setEnabled(false);
        aftRightButton.setEnabled(false);
        riseButton.setEnabled(false);
        sinkButton.setEnabled(false);
        rightButton.setEnabled(false);
        
        runCalibrationButton.setEnabled(false);
        pauseCalibrationButton.setEnabled(false);
        stopCalibrationButton.setEnabled(false);
        updatedButton.setEnabled(false);
        fullBeamAngleButton.setEnabled(false);
        fullBeamAngleTextfieldInput.setEnabled(false);
        calibrationProgressBar.setEnabled(false);
        updateButton.setEnabled(false);
        navigatePositionXTextbox.setEnabled(false);
        navigatePositionYTextbox.setEnabled(false);
        navigatePositionZTextbox.setEnabled(false);
        navigateSphereToPositionButton.setEnabled(false);
        
        starTypeButton.setEnabled(false);
        spiralTypeButton.setEnabled(false);
        gridTypeButton.setEnabled(false);
        
        portForwardInButton.setEnabled(false);
        portForwardOutButton.setEnabled(false);
        portMiddleInButton.setEnabled(false);
        portMiddleOutButton.setEnabled(false);
        portAftInButton.setEnabled(false);
        portAftOutButton.setEnabled(false);

        starboardForwardInButton.setEnabled(false);
        starboardForwardOutButton.setEnabled(false);
        starboardMiddleInButton.setEnabled(false);
        starboardMiddleOutButton.setEnabled(false);
        starboardAftInButton.setEnabled(false);
        starboardAftOutButton.setEnabled(false);
        //Flag that shows that the navigation controls are inactive..
        bNavControls = false;
    }
    
    private void forwardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forwardButtonActionPerformed
        try 
        {
            if (ButtonHandler.buttonWasPressed == false)
            {
                //Disable all navigation buttons while sphere displacement is
                //taking place.
                //------ Added function to disable the nav controls. ---------
                ButtonHandler.disableNavigationControls();
                //------------------------------------------------------------
                ButtonHandler.buttonWasPressed = true;
                //Executes the forward sphere displacement function.
                Geometry.forward();
                ButtonHandler.buttonWasPressed = false;
                forwardButton.requestFocusInWindow();
            }
        } 
        catch (PortInUseException | IOException | InterruptedException | UnsupportedCommOperationException | NoSuchPortException ex) 
        {
            System.out.println("FWD Button Failed");
        }
        ButtonHandler.enableNavigationControls();
    }//GEN-LAST:event_forwardButtonActionPerformed

    private void portAftInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portAftInButtonActionPerformed
        try 
        {
            if (!Communication.portAftSerialNumber.equals("$Unassigned"))
            {
                Geometry.reelInPortAft();
            }
            else
            {
                System.out.println("PORT AFT IN Button not assigned a serial number.");
            }
        } 
        catch (PortInUseException | IOException | InterruptedException | UnsupportedCommOperationException | NoSuchPortException ex) 
        {
            System.out.println("PORT AFT IN Button Failed");
        }
    }//GEN-LAST:event_portAftInButtonActionPerformed

    private void starboardMiddleOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_starboardMiddleOutButtonActionPerformed
        try 
        {
            if (!Communication.starboardMiddleSerialNumber.equals("$Unassigned"))
            {
                Geometry.reelOutStarboardMiddle();
            }
                else
            {
                System.out.println("STBD MID OUT Button not assigned a serial number.");
            }
    } 
        catch (PortInUseException | IOException | InterruptedException | UnsupportedCommOperationException | NoSuchPortException ex) 
        {
            System.out.println("STBD MID OUT Button Failed");
        }
        //ButtonHandler.buttonWasPressed = false;
    }//GEN-LAST:event_starboardMiddleOutButtonActionPerformed

    private void riseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_riseButtonActionPerformed
        //Tries to execute the rise sphere displacement function. 
        try
        { 
            if (ButtonHandler.buttonWasPressed == false)
            {
                //Disable all navigation buttons while sphere displacement is
                //taking place.
                //------ Added function to disable the nav controls. ---------
                ButtonHandler.disableNavigationControls();
                //------------------------------------------------------------
                ButtonHandler.buttonWasPressed = true;
                //Executes the rise sphere displacement function. 
                Geometry.rise();
                ButtonHandler.buttonWasPressed = false;
                riseButton.requestFocusInWindow();
            }
        } 
        //If any of the exceptions below are caught.
        catch (PortInUseException | IOException | InterruptedException | UnsupportedCommOperationException | NoSuchPortException ex) 
        {
            System.out.println("RISE Button Failed");
        }
        ButtonHandler.enableNavigationControls();
    }//GEN-LAST:event_riseButtonActionPerformed

    private void forwardLeftButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forwardLeftButtonActionPerformed
        try 
        {
            if (ButtonHandler.buttonWasPressed == false)
            {
                //Disable all navigation buttons while sphere displacement
                //is taking place.
                //------ Added function to disable the nav controls. ---------
                ButtonHandler.disableNavigationControls();
                //------------------------------------------------------------
                ButtonHandler.buttonWasPressed = true;
                //Executes the forwardLeft sphere displacement function.
                Geometry.forwardLeft();
                ButtonHandler.buttonWasPressed = false;
                forwardLeftButton.requestFocusInWindow();
            }
        } 
        catch (PortInUseException | IOException | InterruptedException | UnsupportedCommOperationException | NoSuchPortException ex) 
        {
            System.out.println("FWD LEFT Button Failed");
        }
        ButtonHandler.enableNavigationControls();
    }//GEN-LAST:event_forwardLeftButtonActionPerformed

    private void forwardRightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forwardRightButtonActionPerformed
        try 
        {
            if (ButtonHandler.buttonWasPressed == false)
            {
                //Disable all navigation buttons while sphere displacement is
                //taking place.
                //------ Added function to disable the nav controls. ---------
                ButtonHandler.disableNavigationControls();
                //------------------------------------------------------------
                ButtonHandler.buttonWasPressed = true;
                //Executes the forwardRight sphere displacement function.
                Geometry.forwardRight();
                ButtonHandler.buttonWasPressed = false;
                forwardRightButton.requestFocusInWindow();
            }
        } 
        catch (PortInUseException | IOException | InterruptedException | UnsupportedCommOperationException | NoSuchPortException ex) 
        {
            System.out.println("FWD RIGHT Button Failed");
        }
        ButtonHandler.enableNavigationControls();
    }//GEN-LAST:event_forwardRightButtonActionPerformed

    private void rightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightButtonActionPerformed
        try 
        {
            if (ButtonHandler.buttonWasPressed == false)
            {
                //Disable all navigation buttons while sphere displacement is
                //taking place.
                //------ Added function to disable the nav controls. ---------
                ButtonHandler.disableNavigationControls();
                //------------------------------------------------------------
                ButtonHandler.buttonWasPressed = true;
                //Executes the right sphere displacement function.
                Geometry.right();
                ButtonHandler.buttonWasPressed = false;
                rightButton.requestFocusInWindow();
            }
        } 
        catch (PortInUseException | IOException | InterruptedException | UnsupportedCommOperationException | NoSuchPortException ex) 
        {
            System.out.println("RIGHT Button Failed");
        }
        ButtonHandler.enableNavigationControls();
    }//GEN-LAST:event_rightButtonActionPerformed

    private void aftRightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aftRightButtonActionPerformed
        try 
        {
            if (ButtonHandler.buttonWasPressed == false)
            {
                //Disable all navigation buttons while sphere displacement is
                //taking place.
                //------ Added function to disable the nav controls. ---------
                ButtonHandler.disableNavigationControls();
                //------------------------------------------------------------
                ButtonHandler.buttonWasPressed = true;
                //Executes the backwardRight sphere displacement function.
                Geometry.backwardRight();
                ButtonHandler.buttonWasPressed = false;
                aftRightButton.requestFocusInWindow();
            }
        } 
        catch (PortInUseException | IOException | InterruptedException | UnsupportedCommOperationException | NoSuchPortException ex) 
        {
            System.out.println("AFT RIGHT Button Failed");
        }
        ButtonHandler.enableNavigationControls();
    }//GEN-LAST:event_aftRightButtonActionPerformed

    private void sinkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sinkButtonActionPerformed
        try 
        {
            if (ButtonHandler.buttonWasPressed == false)
            {
                //Disable all navigation buttons while sphere displacement is
                //taking place.
                //------ Added function to disable the nav controls. ---------
                ButtonHandler.disableNavigationControls();
                //------------------------------------------------------------
                ButtonHandler.buttonWasPressed = true;
                //Executes the sink sphere displacement function.
                Geometry.sink();
                ButtonHandler.buttonWasPressed = false;
                sinkButton.requestFocusInWindow();
            }
        } 
        catch (PortInUseException | IOException | InterruptedException | UnsupportedCommOperationException | NoSuchPortException ex) 
        {
            System.out.println("SINK Button Failed");
        }
        ButtonHandler.enableNavigationControls();
    }//GEN-LAST:event_sinkButtonActionPerformed

    private void aftButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aftButtonActionPerformed
        try 
        {
            if (ButtonHandler.buttonWasPressed == false)
            {
                //Disable all navigation buttons while sphere displacement is
                //taking place.
                //------ Added function to disable the nav controls. ---------
                ButtonHandler.disableNavigationControls();
                //------------------------------------------------------------
                ButtonHandler.buttonWasPressed = true;
                //Executes the backward sphere displacement function.
                Geometry.backward();
                ButtonHandler.buttonWasPressed = false;
                aftButton.requestFocusInWindow();
            }
        } 
        catch (PortInUseException | IOException | InterruptedException | UnsupportedCommOperationException | NoSuchPortException ex) 
        {
            System.out.println("AFT Button Failed");
        }
        ButtonHandler.enableNavigationControls();
    }//GEN-LAST:event_aftButtonActionPerformed

    private void aftLeftButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aftLeftButtonActionPerformed
        try 
        {
            if (ButtonHandler.buttonWasPressed == false)
            {
                //Disable all navigation buttons while sphere displacement is
                //taking place.
                //------ Added function to disable the nav controls. ---------
                ButtonHandler.disableNavigationControls();
                //------------------------------------------------------------
                ButtonHandler.buttonWasPressed = true;
                //Executes the backwardLeft sphere displacement function.
                Geometry.backwardLeft();
                ButtonHandler.buttonWasPressed = false;
                aftLeftButton.requestFocusInWindow();
            }
        } 
        catch (PortInUseException | IOException | InterruptedException | UnsupportedCommOperationException | NoSuchPortException ex) 
        {
            System.out.println("AFT LEFT Button Failed");
        }
        ButtonHandler.enableNavigationControls();
    }//GEN-LAST:event_aftLeftButtonActionPerformed

    private void leftButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftButtonActionPerformed
        try 
        {
            if (ButtonHandler.buttonWasPressed == false)
            {
                //Disable all navigation buttons while sphere displacement is
                //taking place.
                //------ Added function to disable the nav controls. ---------
                ButtonHandler.disableNavigationControls();
                //------------------------------------------------------------
                ButtonHandler.buttonWasPressed = true;
                //Executes the left sphere displacement function.
                Geometry.left();
                ButtonHandler.buttonWasPressed = false;
                leftButton.requestFocusInWindow();
            }
        } 
        catch (PortInUseException | IOException | InterruptedException | UnsupportedCommOperationException | NoSuchPortException ex) 
        {
            System.out.println("LEFT Button Failed");
        }
        ButtonHandler.enableNavigationControls();
    }//GEN-LAST:event_leftButtonActionPerformed

    private void runCalibrationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runCalibrationButtonActionPerformed
        //Sets the navigation state to 'running'.
        if (AutoCalibration.navigationState.equals("stopped"))
        {
            if (updatedButton.isSelected())
            {
                AutoCalibration.navigationState="running";
                (new Thread(new AutoCalibration())).start();
                ButtonHandler.disableNavigationControls();
                runCalibrationButton.setEnabled(false);
                stopCalibrationButton.setEnabled(true);
                pauseCalibrationButton.setEnabled(true);
            }
            else
            {
                Component frame = null;
                JOptionPane.showMessageDialog(frame, "You must toggle the 'Activate' button before the calibration can begin.\n"
                                              + "The reason for this is to ensure that the target coordinates are correctly set.\n"
                                              + "Otherwise, the calibration will be ineffective.",
                                              "WARNING", JOptionPane.WARNING_MESSAGE);
            }
        }
        else if(AutoCalibration.navigationState.equals("paused"))
        {
            if (updatedButton.isSelected())
            {
                AutoCalibration.navigationState="running";
                stopCalibrationButton.setEnabled(true);
                pauseCalibrationButton.setEnabled(true);
            }
            else
            {
                Component frame = null;
                JOptionPane.showMessageDialog(frame, "You must toggle the 'Activate' button before the calibration can begin.\n"
                                              + "The reason for this is to ensure that the target coordinates are correctly set.\n"
                                              + "Otherwise, the calibration will be ineffective.",
                                              "WARNING", JOptionPane.WARNING_MESSAGE);
            }
        }
        else if(AutoCalibration.navigationState.equals("running"))
        {
            AutoCalibration.navigationState="stopped";
            System.out.println("at running - "+AutoCalibration.navigationState);
        }
        else
        {
            //Pass.
        }
    }//GEN-LAST:event_runCalibrationButtonActionPerformed

    private void portForwardOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portForwardOutButtonActionPerformed
        try 
        {
            if (!Communication.portForwardSerialNumber.equals("$Unassigned"))
            {
                //
                Geometry.reelOutPortForward();
            }
            else
            {
                System.out.println("PORT FWD OUT Button not assigned a serial number.");
            }
        } 
        catch (PortInUseException | IOException | InterruptedException | UnsupportedCommOperationException | NoSuchPortException ex) 
        {
            System.out.println("PORT FWD OUT Button Failed");
        }
    }//GEN-LAST:event_portForwardOutButtonActionPerformed

    private void portMiddleInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portMiddleInButtonActionPerformed
        try 
        {
            if (!Communication.portMiddleSerialNumber.equals("$Unassigned"))
            {
                Geometry.reelInPortMiddle();
            }
            else
            {
                System.out.println("PORT MID IN Button not assigned a serial number.");
            }
        } 
        catch (PortInUseException | IOException | InterruptedException | UnsupportedCommOperationException | NoSuchPortException ex) 
        {
            System.out.println("PORT MID IN Button Failed");
        }
    }//GEN-LAST:event_portMiddleInButtonActionPerformed

    private void updatedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatedButtonActionPerformed
        if (updatedButton.isSelected())
        {
            updatedButton.setText("✔");
        }
        else
        {
            updatedButton.setText("Activate");
        }
    }//GEN-LAST:event_updatedButtonActionPerformed

    private void portMiddleOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portMiddleOutButtonActionPerformed
        try 
        {
            if (!Communication.portMiddleSerialNumber.equals("$Unassigned"))
            {
                Geometry.reelOutPortMiddle();
            }
            else
            {
                System.out.println("PORT MID OUT Button not assigned a serial number.");
            }
        } 
        catch (PortInUseException | IOException | InterruptedException | UnsupportedCommOperationException | NoSuchPortException ex) 
        {
            System.out.println("PORT MID OUT Button Failed");
        }
    }//GEN-LAST:event_portMiddleOutButtonActionPerformed

    private void portAftOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portAftOutButtonActionPerformed
        try 
        {
            if (!Communication.portAftSerialNumber.equals("$Unassigned"))
            {
                Geometry.reelOutPortAft();
            }
            else
            {
                System.out.println("PORT AFT OUT Button not assigned a serial number.");
            }
        } 
        catch (PortInUseException | IOException | InterruptedException | UnsupportedCommOperationException | NoSuchPortException ex) 
        {
            System.out.println("PORT AFT OUT Button Failed");
        }
    }//GEN-LAST:event_portAftOutButtonActionPerformed

    private void starboardForwardInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_starboardForwardInButtonActionPerformed
        try 
        {
            if (!Communication.starboardForwardSerialNumber.equals("$Unassigned"))
            {
                Geometry.reelInStarboardForward();
            }
            else
            {
                System.out.println("STBD FWD IN Button not assigned a serial number.");
            }
        } 
        catch (PortInUseException | IOException | InterruptedException | UnsupportedCommOperationException | NoSuchPortException ex) 
        {
            System.out.println("STBD FWD IN Button Failed");
        }
    }//GEN-LAST:event_starboardForwardInButtonActionPerformed

    private void starboardForwardOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_starboardForwardOutButtonActionPerformed
        try 
        {
            if (!Communication.starboardForwardSerialNumber.equals("$Unassigned"))
            {
                Geometry.reelOutStarboardForward();
            }
            else
            {
                System.out.println("STBD FWD OUT Button not assigned a serial number.");
            }
        } 
        catch (PortInUseException | IOException | InterruptedException | UnsupportedCommOperationException | NoSuchPortException ex) 
        {
            System.out.println("STBD FWD OUT Button Failed");
        }
    }//GEN-LAST:event_starboardForwardOutButtonActionPerformed

    private void starboardMiddleInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_starboardMiddleInButtonActionPerformed
        try 
        {
            if (!Communication.starboardMiddleSerialNumber.equals("$Unassigned"))
            {
                Geometry.reelInStarboardMiddle();
            }
            else
            {
                System.out.println("STBD MID IN Button not assigned a serial number.");
            }
        } 
        catch (PortInUseException | IOException | InterruptedException | UnsupportedCommOperationException | NoSuchPortException ex) 
        {
            System.out.println("STBD MID IN Button Failed");
        }
    }//GEN-LAST:event_starboardMiddleInButtonActionPerformed

    private void starboardAftInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_starboardAftInButtonActionPerformed
        try 
        {
            if (!Communication.starboardAftSerialNumber.equals("$Unassigned"))
            {
                Geometry.reelInStarboardAft();
            }
            else
            {
                System.out.println("STBD AFT IN Button not assigned a serial number.");
            }
        } 
        catch (PortInUseException | IOException | InterruptedException | UnsupportedCommOperationException | NoSuchPortException ex) 
        {
            System.out.println("STBD AFT IN Button Failed");
        }
    }//GEN-LAST:event_starboardAftInButtonActionPerformed

    private void starboardAftOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_starboardAftOutButtonActionPerformed
        try 
        {
            if (!Communication.starboardAftSerialNumber.equals("$Unassigned"))
            {
                Geometry.reelOutStarboardAft();
            }
            else
            {
                System.out.println("STBD AFT OUT Button not assigned a serial number.");
            }
        } 
        catch (PortInUseException | IOException | InterruptedException | UnsupportedCommOperationException | NoSuchPortException ex) 
        {
            System.out.println("STBD AFT OUT Button Failed");
        }
    }//GEN-LAST:event_starboardAftOutButtonActionPerformed

    private void portForwardInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portForwardInButtonActionPerformed
        try
        {
            if (!Communication.portForwardSerialNumber.equals("$Unassigned"))
            {
                Geometry.reelInPortForward();
            }
            else
            {
                System.out.println("PORT FWD IN Button not assigned a serial number.");
            }
        }
        catch (PortInUseException | IOException | InterruptedException | UnsupportedCommOperationException | NoSuchPortException ex)
        {
            System.out.println("PORT FWD IN Button Failed");
        }
    }//GEN-LAST:event_portForwardInButtonActionPerformed

    public void buttonEventMouseEntered(java.awt.event.MouseEvent evt, JButton button, String imagePath) 
    {                                            
        //Sets the hover image for the button.
        button.setIcon(new javax.swing.ImageIcon(getClass().getResource(imagePath)));
    } 
    
    public void buttonEventMouseExited(java.awt.event.MouseEvent evt, JButton button, String imagePath) 
    {                                            
        //Sets the hover image for the button.
        button.setIcon(new javax.swing.ImageIcon(getClass().getResource(imagePath)));
    } 
    
    private void stopCalibrationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopCalibrationButtonActionPerformed
        SingleNavigation.stopSingleNavigationInstance = true;
        AutoCalibration.navigationState="stopped";
        ButtonHandler.enableNavigationControls();
        runCalibrationButton.setEnabled(true);
        pauseCalibrationButton.setEnabled(false);
        stopCalibrationButton.setEnabled(false);
        calibrationProgressBar.setValue(0);

    }//GEN-LAST:event_stopCalibrationButtonActionPerformed

    private void pauseCalibrationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseCalibrationButtonActionPerformed
         //Sets the navigation state to 'paused'.
        AutoCalibration.navigationState="paused";
        pauseCalibrationButton.setEnabled(false);
    }//GEN-LAST:event_pauseCalibrationButtonActionPerformed

    private void fullBeamAngleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fullBeamAngleButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fullBeamAngleButtonActionPerformed

    private void rightButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rightButtonMouseEntered
        rightButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/RightHover.png")));
    }//GEN-LAST:event_rightButtonMouseEntered

    private void rightButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rightButtonMouseExited
        rightButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/Right.png")));
    }//GEN-LAST:event_rightButtonMouseExited

    private void aftRightButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aftRightButtonMouseEntered
        aftRightButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/AftRightHover.png")));
    }//GEN-LAST:event_aftRightButtonMouseEntered

    private void aftRightButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aftRightButtonMouseExited
        aftRightButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/AftRight.png")));
    }//GEN-LAST:event_aftRightButtonMouseExited

    private void aftButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aftButtonMouseEntered
        aftButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/AftHover.png")));
    }//GEN-LAST:event_aftButtonMouseEntered

    private void aftButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aftButtonMouseExited
        aftButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/Aft.png")));
    }//GEN-LAST:event_aftButtonMouseExited

    private void aftLeftButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aftLeftButtonMouseEntered
        aftLeftButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/AftLeftHover.png")));
    }//GEN-LAST:event_aftLeftButtonMouseEntered

    private void aftLeftButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aftLeftButtonMouseExited
        aftLeftButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/AftLeft.png")));
    }//GEN-LAST:event_aftLeftButtonMouseExited

    private void leftButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_leftButtonMouseEntered
        leftButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/LeftHover.png")));
    }//GEN-LAST:event_leftButtonMouseEntered

    private void leftButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_leftButtonMouseExited
        leftButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/Left.png")));
    }//GEN-LAST:event_leftButtonMouseExited

    private void forwardLeftButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_forwardLeftButtonMouseEntered
        forwardLeftButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/ForwardLeftHover.png")));
    }//GEN-LAST:event_forwardLeftButtonMouseEntered

    private void forwardLeftButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_forwardLeftButtonMouseExited
        forwardLeftButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/ForwardLeft.png")));
    }//GEN-LAST:event_forwardLeftButtonMouseExited

    private void forwardButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_forwardButtonMouseEntered
        forwardButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/ForwardHover.png")));
    }//GEN-LAST:event_forwardButtonMouseEntered

    private void forwardButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_forwardButtonMouseExited
        forwardButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/Forward.png")));
    }//GEN-LAST:event_forwardButtonMouseExited

    private void forwardRightButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_forwardRightButtonMouseEntered
        forwardRightButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/ForwardRightHover.png")));
    }//GEN-LAST:event_forwardRightButtonMouseEntered

    private void forwardRightButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_forwardRightButtonMouseExited
        forwardRightButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/ForwardRight.png")));
    }//GEN-LAST:event_forwardRightButtonMouseExited

    private void riseButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_riseButtonMouseEntered
        riseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/RiseHover.png")));
    }//GEN-LAST:event_riseButtonMouseEntered

    private void riseButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_riseButtonMouseExited
        riseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/Rise.png")));
    }//GEN-LAST:event_riseButtonMouseExited

    private void sinkButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sinkButtonMouseEntered
        sinkButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/SinkHover.png")));
    }//GEN-LAST:event_sinkButtonMouseEntered

    private void sinkButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sinkButtonMouseExited
        sinkButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/Sink.png")));
    }//GEN-LAST:event_sinkButtonMouseExited

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        //Updates the position of the echosounder view to that of the calibration sphere.
        Geometry.echosounderBeamTargetPosition[X]=Geometry.euclidianSpherePosition[X];
        Geometry.echosounderBeamTargetPosition[Y]=Geometry.euclidianSpherePosition[Y];
        Geometry.echosounderBeamTargetPosition[Z]=Geometry.euclidianSpherePosition[Z];
        //Retains original depth of transducer but updates the xy position of
        //the transducer to that of the calibration sphere.
        Geometry.transducerPosition[X]=Geometry.euclidianSpherePosition[X];
        Geometry.transducerPosition[Y]=Geometry.euclidianSpherePosition[Y];
        //Sets the updated position to the updatePosition textbox.
        CoordinateDisplayTopComponent.targetPositionXTextbox.setText("X = "+Integer.toString(Math.round(Geometry.echosounderBeamTargetPosition[X]))+" counts");
        CoordinateDisplayTopComponent.targetPositionYTextbox.setText("Y = "+Integer.toString(Math.round(Geometry.echosounderBeamTargetPosition[Y]))+" counts");
        CoordinateDisplayTopComponent.targetPositionZTextbox.setText("Z = "+Integer.toString(Math.round(Geometry.echosounderBeamTargetPosition[Z]))+" counts");
        //Sending a terminal message informing user of updated action.
        Component frame = null;
        JOptionPane.showMessageDialog(frame, "The target center position has been updated with the current sphere position.");
    }//GEN-LAST:event_updateButtonActionPerformed

    private void navigatePositionXTextboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_navigatePositionXTextboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_navigatePositionXTextboxActionPerformed

    private void navigateSphereToPositionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_navigateSphereToPositionButtonActionPerformed
        try
        {
            AutoCalibration.autoCalibrationModeType="single";
            starTypeButton.setSelected(false);
            gridTypeButton.setSelected(false);
            spiralTypeButton.setSelected(false);
            updatedButton.setSelected(true);
            updatedButton.setText("✔");
            stopCalibrationButton.setEnabled(true);
            pauseCalibrationButton.setEnabled(true);
            runCalibrationButton.setEnabled(false);
            (new Thread(new AutoCalibration())).start();
            
        }
        catch (NumberFormatException ex)
        {
            Component frame = null;
            JOptionPane.showMessageDialog(frame, "You must enter a valid integer for each coordinate input \n"
                                          + "before you can navigate the sphere.");
        }
    }//GEN-LAST:event_navigateSphereToPositionButtonActionPerformed

    private void starTypeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_starTypeButtonActionPerformed
        AutoCalibration.autoCalibrationModeType="star";
        spiralTypeButton.setSelected(false);
        gridTypeButton.setSelected(false);
        AutoCalibration.navigationState="stopped";
    }//GEN-LAST:event_starTypeButtonActionPerformed

    private void spiralTypeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spiralTypeButtonActionPerformed
        AutoCalibration.autoCalibrationModeType="spiral";    
        starTypeButton.setSelected(false);
        gridTypeButton.setSelected(false);
        AutoCalibration.navigationState="stopped";
    }//GEN-LAST:event_spiralTypeButtonActionPerformed

    private void gridTypeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gridTypeButtonActionPerformed
        AutoCalibration.autoCalibrationModeType="grid";    
        spiralTypeButton.setSelected(false);
        starTypeButton.setSelected(false);
        AutoCalibration.navigationState="stopped";
    }//GEN-LAST:event_gridTypeButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JButton aftButton;
    public static javax.swing.JButton aftLeftButton;
    public static javax.swing.JButton aftRightButton;
    public static javax.swing.JPanel autonavPanel;
    public static javax.swing.JProgressBar calibrationProgressBar;
    public static javax.swing.JButton forwardButton;
    public static javax.swing.JButton forwardLeftButton;
    public static javax.swing.JButton forwardRightButton;
    public static javax.swing.JButton fullBeamAngleButton;
    public static javax.swing.JTextField fullBeamAngleTextfieldInput;
    public static javax.swing.JToggleButton gridTypeButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel joystickPanel;
    public static javax.swing.JButton leftButton;
    public static javax.swing.JTextField navigatePositionXTextbox;
    public static javax.swing.JTextField navigatePositionYTextbox;
    public static javax.swing.JTextField navigatePositionZTextbox;
    public static javax.swing.JButton navigateSphereToPositionButton;
    public static javax.swing.JButton pauseCalibrationButton;
    public static javax.swing.JButton portAftInButton;
    public static javax.swing.JButton portAftOutButton;
    public static javax.swing.JButton portForwardInButton;
    public static javax.swing.JButton portForwardOutButton;
    public static javax.swing.JButton portMiddleInButton;
    public static javax.swing.JButton portMiddleOutButton;
    private javax.swing.JPanel portPanel;
    public static javax.swing.JButton rightButton;
    public static javax.swing.JButton riseButton;
    public static javax.swing.JButton runCalibrationButton;
    public static javax.swing.JButton sinkButton;
    public static javax.swing.JToggleButton spiralTypeButton;
    public static javax.swing.JToggleButton starTypeButton;
    public static javax.swing.JButton starboardAftInButton;
    public static javax.swing.JButton starboardAftOutButton;
    public static javax.swing.JButton starboardForwardInButton;
    public static javax.swing.JButton starboardForwardOutButton;
    public static javax.swing.JButton starboardMiddleInButton;
    public static javax.swing.JButton starboardMiddleOutButton;
    private javax.swing.JPanel starboardPanel;
    public static javax.swing.JButton stopCalibrationButton;
    public static javax.swing.JButton updateButton;
    public static javax.swing.JToggleButton updatedButton;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
