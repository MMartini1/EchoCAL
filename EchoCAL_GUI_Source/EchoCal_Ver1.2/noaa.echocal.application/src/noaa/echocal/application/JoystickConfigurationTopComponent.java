/*
 * Copyright (C) 2016 JGodlewski
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package noaa.echocal.application;

import java.util.ArrayList;
import net.java.games.input.Controller;
import net.java.games.input.ControllerEnvironment;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//noaa.echocal.application//JoystickConfiguration//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "JoystickConfigurationTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "rightSlidingSide", openAtStartup = true)
@ActionID(category = "Window", id = "noaa.echocal.application.JoystickConfigurationTopComponent")
@ActionReference(path = "Menu/Tools" , position = 12)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_JoystickConfigurationAction",
        preferredID = "JoystickConfigurationTopComponent"
)
@Messages({
    "CTL_JoystickConfigurationAction=JoystickConfiguration",
    "CTL_JoystickConfigurationTopComponent=JoystickConfiguration Window",
    "HINT_JoystickConfigurationTopComponent=This is a JoystickConfiguration window"
})
public final class JoystickConfigurationTopComponent extends TopComponent {
    
    public static boolean bEnable = false;
    public Thread joyStick;
    public static ArrayList<Controller> foundControllers;

    public JoystickConfigurationTopComponent() {
        initComponents();
        setName(Bundle.CTL_JoystickConfigurationTopComponent());
        setToolTipText(Bundle.HINT_JoystickConfigurationTopComponent());
        putClientProperty(TopComponent.PROP_DRAGGING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_KEEP_PREFERRED_SIZE_WHEN_SLIDED_IN, Boolean.TRUE);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jEnablePanel = new javax.swing.JPanel();
        jComboBox_controllers = new javax.swing.JComboBox<>();
        jEnableButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jAxisPanel = new javax.swing.JPanel();
        jXYAxisPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jZAxisPanel = new javax.swing.JPanel();
        jXField = new javax.swing.JTextField();
        jYField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButtonPanel = new javax.swing.JPanel();
        jHatSwitchPanel = new javax.swing.JPanel();

        setMaximumSize(new java.awt.Dimension(500, 500));
        setPreferredSize(new java.awt.Dimension(500, 500));

        jComboBox_controllers.setToolTipText(org.openide.util.NbBundle.getMessage(JoystickConfigurationTopComponent.class, "JoystickConfigurationTopComponent.jComboBox_controllers.toolTipText")); // NOI18N
        jComboBox_controllers.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jComboBox_controllers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_controllersActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jEnableButton, org.openide.util.NbBundle.getMessage(JoystickConfigurationTopComponent.class, "JoystickConfigurationTopComponent.jEnableButton.text")); // NOI18N
        jEnableButton.setToolTipText(org.openide.util.NbBundle.getMessage(JoystickConfigurationTopComponent.class, "JoystickConfigurationTopComponent.jEnableButton.toolTipText")); // NOI18N
        jEnableButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jEnableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jEnableButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(JoystickConfigurationTopComponent.class, "JoystickConfigurationTopComponent.jLabel1.text")); // NOI18N
        jLabel1.setToolTipText(org.openide.util.NbBundle.getMessage(JoystickConfigurationTopComponent.class, "JoystickConfigurationTopComponent.jLabel1.toolTipText")); // NOI18N

        javax.swing.GroupLayout jEnablePanelLayout = new javax.swing.GroupLayout(jEnablePanel);
        jEnablePanel.setLayout(jEnablePanelLayout);
        jEnablePanelLayout.setHorizontalGroup(
            jEnablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jEnablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox_controllers, 0, 253, Short.MAX_VALUE)
                .addGap(91, 91, 91)
                .addComponent(jEnableButton)
                .addGap(20, 20, 20))
        );
        jEnablePanelLayout.setVerticalGroup(
            jEnablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jEnablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jEnablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox_controllers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jEnableButton)
                    .addComponent(jLabel1))
                .addContainerGap(51, Short.MAX_VALUE))
        );

        jAxisPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, org.openide.util.NbBundle.getMessage(JoystickConfigurationTopComponent.class, "JoystickConfigurationTopComponent.jAxisPanel.border.title"), javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        jXYAxisPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jXYAxisPanel.setMaximumSize(new java.awt.Dimension(111, 111));
        jXYAxisPanel.setMinimumSize(new java.awt.Dimension(111, 111));
        jXYAxisPanel.setPreferredSize(new java.awt.Dimension(111, 111));

        javax.swing.GroupLayout jXYAxisPanelLayout = new javax.swing.GroupLayout(jXYAxisPanel);
        jXYAxisPanel.setLayout(jXYAxisPanelLayout);
        jXYAxisPanelLayout.setHorizontalGroup(
            jXYAxisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 109, Short.MAX_VALUE)
        );
        jXYAxisPanelLayout.setVerticalGroup(
            jXYAxisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 109, Short.MAX_VALUE)
        );

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(JoystickConfigurationTopComponent.class, "JoystickConfigurationTopComponent.jLabel2.text")); // NOI18N
        jLabel2.setToolTipText(org.openide.util.NbBundle.getMessage(JoystickConfigurationTopComponent.class, "JoystickConfigurationTopComponent.jLabel2.toolTipText")); // NOI18N

        javax.swing.GroupLayout jZAxisPanelLayout = new javax.swing.GroupLayout(jZAxisPanel);
        jZAxisPanel.setLayout(jZAxisPanelLayout);
        jZAxisPanelLayout.setHorizontalGroup(
            jZAxisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 299, Short.MAX_VALUE)
        );
        jZAxisPanelLayout.setVerticalGroup(
            jZAxisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jXField.setEditable(false);
        jXField.setText(org.openide.util.NbBundle.getMessage(JoystickConfigurationTopComponent.class, "JoystickConfigurationTopComponent.jXField.text")); // NOI18N
        jXField.setMaximumSize(new java.awt.Dimension(69, 22));
        jXField.setMinimumSize(new java.awt.Dimension(69, 22));
        jXField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jXFieldActionPerformed(evt);
            }
        });

        jYField.setEditable(false);
        jYField.setText(org.openide.util.NbBundle.getMessage(JoystickConfigurationTopComponent.class, "JoystickConfigurationTopComponent.jYField.text")); // NOI18N
        jYField.setToolTipText(org.openide.util.NbBundle.getMessage(JoystickConfigurationTopComponent.class, "JoystickConfigurationTopComponent.jYField.toolTipText")); // NOI18N
        jYField.setMaximumSize(new java.awt.Dimension(69, 22));
        jYField.setMinimumSize(new java.awt.Dimension(69, 22));
        jYField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jYFieldActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(JoystickConfigurationTopComponent.class, "JoystickConfigurationTopComponent.jLabel3.text")); // NOI18N
        jLabel3.setToolTipText(org.openide.util.NbBundle.getMessage(JoystickConfigurationTopComponent.class, "JoystickConfigurationTopComponent.jLabel3.toolTipText")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(JoystickConfigurationTopComponent.class, "JoystickConfigurationTopComponent.jLabel4.text")); // NOI18N
        jLabel4.setToolTipText(org.openide.util.NbBundle.getMessage(JoystickConfigurationTopComponent.class, "JoystickConfigurationTopComponent.jLabel4.toolTipText")); // NOI18N

        javax.swing.GroupLayout jAxisPanelLayout = new javax.swing.GroupLayout(jAxisPanel);
        jAxisPanel.setLayout(jAxisPanelLayout);
        jAxisPanelLayout.setHorizontalGroup(
            jAxisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jAxisPanelLayout.createSequentialGroup()
                .addGroup(jAxisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jAxisPanelLayout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jXYAxisPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jAxisPanelLayout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(jLabel2)))
                .addGroup(jAxisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jAxisPanelLayout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jZAxisPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jAxisPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jXField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jYField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(67, 67, 67))))
        );
        jAxisPanelLayout.setVerticalGroup(
            jAxisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jAxisPanelLayout.createSequentialGroup()
                .addGroup(jAxisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jAxisPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jXYAxisPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jZAxisPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jAxisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jYField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(jXField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButtonPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, org.openide.util.NbBundle.getMessage(JoystickConfigurationTopComponent.class, "JoystickConfigurationTopComponent.jButtonPanel.border.title"), javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        javax.swing.GroupLayout jButtonPanelLayout = new javax.swing.GroupLayout(jButtonPanel);
        jButtonPanel.setLayout(jButtonPanelLayout);
        jButtonPanelLayout.setHorizontalGroup(
            jButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jButtonPanelLayout.setVerticalGroup(
            jButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 178, Short.MAX_VALUE)
        );

        jHatSwitchPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, org.openide.util.NbBundle.getMessage(JoystickConfigurationTopComponent.class, "JoystickConfigurationTopComponent.jHatSwitchPanel.border.title"), javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        javax.swing.GroupLayout jHatSwitchPanelLayout = new javax.swing.GroupLayout(jHatSwitchPanel);
        jHatSwitchPanel.setLayout(jHatSwitchPanelLayout);
        jHatSwitchPanelLayout.setHorizontalGroup(
            jHatSwitchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 198, Short.MAX_VALUE)
        );
        jHatSwitchPanelLayout.setVerticalGroup(
            jHatSwitchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jEnablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jAxisPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButtonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jHatSwitchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jEnablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jAxisPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jHatSwitchPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jEnableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jEnableButtonActionPerformed
        // Check boolean variable "bEnable". If it is false, then we want to enable the Joystick interface.
        // If it is true, then the Joystick should already be active, and we should de-activate Joystick Control.
        if (!bEnable)
        {
            //Set bEnable to true, and deactivate the virtual joystick controls.
            bEnable = true;
            //Define the "joyStick" thread..
            joyStick = new JoystickThread();
            joyStick.setName("joyStickThread");
            //Check to see if the navigation controls are active. If so, then it's safe to
            //deactivate the virtual joystick buttons..
            if (NavigationControls.bNavControls)
            {
                disableVirtualJoystick();
            }
            jEnableButton.setText("Disable");

            //Search for available Joysticks.
            foundControllers = new ArrayList<>();
            searchForControllers();
        
            // If at least one controller was found we start showing controller data on window.
            if(!foundControllers.isEmpty()){
                System.out.println("We found a controller");
                //Set "stopJoystick" flag to false..
                JoystickThread.stopJoystick = false;
                joyStick.start();
            }
            else
            {
                addControllerName("No controller found!");
            }
        }else
        {
            //Set bEnable to false, and activate the virtual joystick controls.
            bEnable = false;

            if (joyStick.isAlive())
            {
                System.out.println("Stopping Joystick Thread..");
                //Set "stopJoystick" flag to true..
                JoystickThread.stopJoystick = true;
                try {
                    //Wait for Joystick thread to stop..
                    joyStick.join(1000);
                } catch (InterruptedException ex) {
                    System.out.println("Joystick Thread interrupted..");
                }
            }
            //Check to see if the navigation controls are active. If so, then it's safe to
            //activate the virtual joystick buttons..
            if (NavigationControls.bNavControls)
            {
                enableVirtualJoystick();
            }
            jEnableButton.setText("Enable");
        }
    }//GEN-LAST:event_jEnableButtonActionPerformed

    private void jComboBox_controllersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_controllersActionPerformed
        // When another controller is selected we have to remove old stuff.
        /*
        jButtonPanel.removeAll();
        jButtonPanel.repaint();
        jAxisPanel.removeAll();
        jAxisPanel.repaint();
        jXYAxisPanel.removeAll();
        jXYAxisPanel.repaint();
        */
    }//GEN-LAST:event_jComboBox_controllersActionPerformed

    private void jXFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jXFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jXFieldActionPerformed

    private void jYFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jYFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jYFieldActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JPanel jAxisPanel;
    public static javax.swing.JPanel jButtonPanel;
    public static javax.swing.JComboBox<String> jComboBox_controllers;
    public javax.swing.JButton jEnableButton;
    private javax.swing.JPanel jEnablePanel;
    public static javax.swing.JPanel jHatSwitchPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    public static javax.swing.JTextField jXField;
    public static javax.swing.JPanel jXYAxisPanel;
    public static javax.swing.JTextField jYField;
    public static javax.swing.JPanel jZAxisPanel;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    public static void enableVirtualJoystick()
    {
        NavigationControls.leftButton.setEnabled(true);
        NavigationControls.rightButton.setEnabled(true);
        NavigationControls.forwardButton.setEnabled(true);
        NavigationControls.aftButton.setEnabled(true);
        NavigationControls.aftLeftButton.setEnabled(true);
        NavigationControls.aftRightButton.setEnabled(true);
        NavigationControls.forwardLeftButton.setEnabled(true);
        NavigationControls.forwardRightButton.setEnabled(true);
        NavigationControls.sinkButton.setEnabled(true);
        NavigationControls.riseButton.setEnabled(true);
    }
    
    public static void disableVirtualJoystick()
    {
        NavigationControls.leftButton.setEnabled(false);
        NavigationControls.rightButton.setEnabled(false);
        NavigationControls.forwardButton.setEnabled(false);
        NavigationControls.aftButton.setEnabled(false);
        NavigationControls.aftLeftButton.setEnabled(false);
        NavigationControls.aftRightButton.setEnabled(false);
        NavigationControls.forwardLeftButton.setEnabled(false);
        NavigationControls.forwardRightButton.setEnabled(false);
        //......................................................................
        // Leave the "rise" and "sink" buttons active. We still want a way
        // to change the depth of the sphere when controlling it with the
        // joystick... We could assign the "rise" and "sink" functions to 
        // joystick buttons, but this code can accept any type of joystick,
        // so we don't know what (if any) buttons are available on the joystick.
        //......................................................................
        //NavigationControls.sinkButton.setEnabled(false);
        //NavigationControls.riseButton.setEnabled(false);   
    }
    /* Methods for setting components on the window. */
    public void addControllerName(String controllerName){
        jComboBox_controllers.addItem(controllerName);
    }
    /**
     * Search (and save) for controllers of type Controller.Type.STICK,
     * Controller.Type.GAMEPAD, Controller.Type.WHEEL and Controller.Type.FINGERSTICK.
     */
    private void searchForControllers() {

        Controller[] controllers = ControllerEnvironment.getDefaultEnvironment().getControllers();
        System.out.println("Default environment = "+ControllerEnvironment.getDefaultEnvironment());
        //Clear out the jComboBox_controllers items..
        jComboBox_controllers.removeAllItems();
        //Creat the controller variable, and clear it..
        Controller controller = null;
        
        for (Controller controller1 : controllers) {
            controller = controller1;
            if (
                    controller.getType() == Controller.Type.STICK ||
                    controller.getType() == Controller.Type.GAMEPAD || 
                    controller.getType() == Controller.Type.WHEEL ||
                    controller.getType() == Controller.Type.FINGERSTICK
                    )
            {
                // Add new controller to the list of all controllers.
                foundControllers.add(controller);
                
                // Add new controller to the list on the window.
                addControllerName(controller.getName() + " - " + controller.getType().toString() + " type");
            }
        }
    }
}
