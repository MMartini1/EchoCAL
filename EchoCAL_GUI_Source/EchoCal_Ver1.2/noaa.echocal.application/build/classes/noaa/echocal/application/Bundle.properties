CTL_CommPortConfigUIAction=Serial Port Configuration Tool
CTL_CommPortConfigUITopComponent=Serial Port Configuration Tool
CTL_CoordinateDisplayAction=Coordinate Display Window
CTL_CoordinateDisplayTopComponent=Coordinate Window
CTL_DiagramAction=Vessel Diagram
CTL_DiagramTopComponent=Vessel Diagram
CTL_JoystickConfigurationAction=JoystickConfiguration
CTL_JoystickConfigurationTopComponent=JoystickConfiguration Window
CTL_NavigationControls=Navigation Control Window
CTL_NavigationControlsAction=Display Navigation Controls
CTL_VesselConfigurationUIAction=Vessel Configuration Tool
CTL_VesselConfigurationUITopComponent=Vessel Configuration Tool
HINT_CommPortConfigUITopComponent=This is the serial port configuration tool
HINT_CoordinateDisplayTopComponent=This is the Coordinate Window
HINT_DiagramTopComponent=Vessel Diagram
HINT_JoystickConfigurationTopComponent=This is a JoystickConfiguration window
HINT_NavigationControls=Navigation Controls
HINT_VesselConfigurationUITopComponent=This is a Vessel Configuration tool
OpenIDE-Module-Display-Category=Java SE
OpenIDE-Module-Long-Description=\
    The  EchoCAL program is used to wirelessly control remote Canon Downriggers to assist in calibrating scientific echosounders on any research vessel.
OpenIDE-Module-Name=noaa.echocal.application
AutoCalibrationUITopComponent.jButton23.text=
AutoCalibrationUITopComponent.jButton21.text=
AutoCalibrationUITopComponent.jTextField14.text=
AutoCalibrationUITopComponent.jButton36.text=Full Beam Angle
AutoCalibrationUITopComponent.jToggleButton2.text=
AutoCalibrationUITopComponent.jButton25.text=
OpenIDE-Module-Short-Description=Echosounder calibration software.
PositionUITopComponent.transducerPositionButton.text=Transducer Position
PositionUITopComponent.updateButton.text=Target Position / Update With Sphere Position
PositionUITopComponent.navigateSphereToPositionButton.text=Navigate Sphere to Chosen Position
PositionUITopComponent.spherePositionButton.text=Sphere Position
PositionUITopComponent.spherePositionXTextbox.text=
PositionUITopComponent.spherePositionYTextbox.text=
PositionUITopComponent.spherePositionZTextbox.text=
PositionUITopComponent.transducerPositionXTextbox.text=
PositionUITopComponent.transducerPositionYTextbox.text=
PositionUITopComponent.transducerPositionZTextbox.text=
PositionUITopComponent.navigatePositionXTextbox.text=Input X counts...
PositionUITopComponent.navigatePositionYTextbox.text=Input Y counts...
PositionUITopComponent.navigatePositionZTextbox.text=Input Z counts...
VesselConfigurationUITopComponent.portForwardHeightFromOceanButton.text=PF Height
VesselConfigurationUITopComponent.portMiddleHeightFromOceanButton.text=PM Height
VesselConfigurationUITopComponent.portAftHeightFromOceanButton.text=PA Height
VesselConfigurationUITopComponent.starboardForwardHeightFromOceanButton.text=SF Height
VesselConfigurationUITopComponent.starboardMiddleHeightFromOceanButton.text=SM Height
VesselConfigurationUITopComponent.starboardAftHeightFromOceanButton.text=SA Height
VesselConfigurationUITopComponent.distanceFromButton1.text=Distance from
VesselConfigurationUITopComponent.distanceFromButton2.text=Distance from
VesselConfigurationUITopComponent.distanceFromButton3.text=Distance from
VesselConfigurationUITopComponent.distanceFromButton4.text=Distance from
VesselConfigurationUITopComponent.vesselWidthButton.text=Vessel Width
VesselConfigurationUITopComponent.transducerDepthButton.text=Transducer Depth
VesselConfigurationUITopComponent.targetDepthButton.text=Target Sphere Depth
VesselConfigurationUITopComponent.transducerXOffsetButton.text=Transducer X Offset
VesselConfigurationUITopComponent.toLabel1.text=to
VesselConfigurationUITopComponent.toLabel2.text=to
VesselConfigurationUITopComponent.toLabel3.text=to
VesselConfigurationUITopComponent.toLabel4.text=to
PositionUITopComponent.countUnitsToggleButton.text=Counts
PositionUITopComponent.meterUnitsToggleButton.text=Meters
VesselConfigurationUITopComponent.portForwardHeightFromOceanTextbox.text=(meters)
VesselConfigurationUITopComponent.portMiddleHeightFromOceanTextbox.text=(meters)
VesselConfigurationUITopComponent.portAftHeightFromOceanTextbox.text=(meters)
VesselConfigurationUITopComponent.starboardForwardHeightFromOceanTextbox.text=(meters)
VesselConfigurationUITopComponent.starboardMiddleHeightFromOceanTextbox.text=(meters)
VesselConfigurationUITopComponent.starboardAftHeightFromOceanTextbox.text=(meters)
VesselConfigurationUITopComponent.vesselWidthTextbox.text=(meters)
VesselConfigurationUITopComponent.transducerDepthTextbox.text=(meters)
VesselConfigurationUITopComponent.targetDepthTextbox.text=(meters)
VesselConfigurationUITopComponent.transducerXOffsetTextbox.text=(meters)
VesselConfigurationUITopComponent.transducerYDistanceTextbox.text=(meters)
CommunicationConfigUITopComponent.jButton1.text=Connect
CommPortConfigUITopComponent.parityCombobox.toolTipText=
CommPortConfigUITopComponent.parityButton.text=Parity :
CommPortConfigUITopComponent.stopBitsButton.text=Stop bits :
CommPortConfigUITopComponent.dataBitsButton.text=Data bits :
CommPortConfigUITopComponent.scanButton.text=Scan
CommPortConfigUITopComponent.availableDeviceList.text=
CommPortConfigUITopComponent.refreshButton.text=Refresh ports
CommPortConfigUITopComponent.commPortConfigLogger.text=1) To begin, make sure the transceiver is plugged into a USB port. \n2) Next, click 'Refresh Ports' to query the available comm ports on your computer.\n3) Select the comm port which the transceiver is connected to.\n4) Click 'Scan'.
CommPortConfigUITopComponent.baudRateButton.text=Baud Rate :
PositionUITopComponent.calibrationModeButton.text=Calibration Mode
VesselConfigurationUITopComponent.firstRelativeDistanceToTextfield.text=
VesselConfigurationUITopComponent.secondRelativeDistanceToTextfield.text=
VesselConfigurationUITopComponent.thirdRelativeDistanceFromTextfield.text=
VesselConfigurationUITopComponent.thirdRelativeDistanceToTextfield.text=
VesselConfigurationUITopComponent.fourthRelativeDistanceToTextfield.text=
VesselConfigurationUITopComponent.firstRelativeDistanceFromTextfield.text=
VesselConfigurationUITopComponent.secondRelativeDistanceFromTextfield.text=
VesselConfigurationUITopComponent.fourthRelativeDistanceFromTextfield.text=
VesselConfigurationUITopComponent.fourthRelativeDistanceInputTextfield.text=(meters)
VesselConfigurationUITopComponent.secondRelativeDistanceInputTextfield.text=(meters)
VesselConfigurationUITopComponent.thirdRelativeDistanceInputTextfield.text=(meters)
VesselConfigurationUITopComponent.firstRelativeDistanceInputTextfield.text=(meters)
DownriggerConfigurationUITopComponent.portForwardSetCountsButton.text=Set New Count
DownriggerConfigurationUITopComponent.portMiddleSetCountsButton.text=Set New Count
DownriggerConfigurationUITopComponent.portAftSetCountsButton.text=Set New Count
DownriggerConfigurationUITopComponent.starboardForwardSetCountsButton.text=Set New Count
DownriggerConfigurationUITopComponent.starboardMiddleSetCountsButton.text=Set New Count
DownriggerConfigurationUITopComponent.starboardAftSetCountsButton.text=Set New Count
DownriggerConfigurationUITopComponent.portForwardSetCountsTextbox.text=Enter new counts..
DownriggerConfigurationUITopComponent.portMiddleSetCountsTextbox.text=Enter new counts..
DownriggerConfigurationUITopComponent.portAftSetCountsTextbox.text=Enter new counts..
DownriggerConfigurationUITopComponent.starboardForwardSetCountsTextbox.text=Enter new counts..
DownriggerConfigurationUITopComponent.starboardMiddleSetCountsTextbox.text=Enter new counts..
DownriggerConfigurationUITopComponent.starboardAftSetCountsTextbox.text=Set new counts..
DownriggerConfigurationUITopComponent.portForwardStationConfigurationLabelButton.text=Port Forward Station
DownriggerConfigurationUITopComponent.portMiddleStationConfigurationLabelButton.text=Port Middle Station
DownriggerConfigurationUITopComponent.portAftStationConfigurationLabelButton.text=Port Aft Station
DownriggerConfigurationUITopComponent.starboardForwardStationConfigurationLabelButton.text=Starboard Forward Station
DownriggerConfigurationUITopComponent.starboardMiddleStationConfigurationLabelButton.text=Starboard Middle Station
DownriggerConfigurationUITopComponent.starboardAftStationConfigurationLabelButton.text=Starboard Aft Station
CommPortConfigUITopComponent.jButton1.text=EchoCal devices discovered
CommPortConfigUITopComponent.jButton2.text=Serial Port Configuration Logger
DownriggerStationUITopComponent.jLabel1.text=
DownriggerStationUITopComponent.starboardAftCountTextbox.text=
DownriggerStationUITopComponent.starboardMiddleCountTextbox.text=
DownriggerStationUITopComponent.starboardForwardCountTextbox.text=
DownriggerStationUITopComponent.starboardAftTensionButton.text=Tension
DownriggerStationUITopComponent.starboardAftDownriggerStationButton.text=SA Line
DownriggerStationUITopComponent.starboardMiddleTensionButton.text=Tension
DownriggerStationUITopComponent.starboardMiddleDownriggerStationButton.text=SM Line
DownriggerStationUITopComponent.starboardForwardTensionButton.text=Tension
DownriggerStationUITopComponent.starboardForwardDownriggerStationButton.text=SF Line
DownriggerStationUITopComponent.portAftTensionButton.text=Tension
DownriggerStationUITopComponent.portAftCountTextbox.text=
DownriggerStationUITopComponent.portAftDownriggerStationButton.text=PA Line
DownriggerStationUITopComponent.portMiddleCountTextbox.text=
DownriggerStationUITopComponent.portMiddleTensionButton.text=Tension
DownriggerStationUITopComponent.portMiddleDownriggerStationButton.text=PM Line
DownriggerStationUITopComponent.portForwardCountTextbox.text=
DownriggerStationUITopComponent.portForwardTensionButton.text=Tension
PositionUITopComponent.jButton1.text=Echocal Position Logger
VesselConfigurationUITopComponent.loadConfigurationButton.text=Load Config File
VesselConfigurationUITopComponent.saveConfigurationButton.text=Save As...
DownriggerStationUITopComponent.jButton1.text=Downrigger Station Logger
PositionUITopComponent.clearPositionUILoggerButton.text=Clear Logger
VesselConfigurationUITopComponent.configurationPathLabelButton.text=Configuation File: No configuration has been set.
PositionUITopComponent.jButton2.text=jButton2
PositionUITopComponent.stopNavigationButton.text=Stop Navigation
VesselConfigurationUITopComponent.downriggerYOffsetButton.text=Downrigger Y Offset
CoordinateDisplayTopComponent.configDiagram.text=
CoordinateDisplayTopComponent.spherePositionXTextbox.text=
CoordinateDisplayTopComponent.spherePositionYTextbox.text=
CoordinateDisplayTopComponent.spherePositionZTextbox.text=
CoordinateDisplayTopComponent.spherePositionButton.text=Sphere Coordinates:
CoordinateDisplayTopComponent.targetPositionButton.text=Target Coordinates:
PositionUITopComponent.targetPositionXTextbox.text=
PositionUITopComponent.targetPositionYTextbox.text=
PositionUITopComponent.targetPositionZTextbox.text=
CoordinateDisplayTopComponent.targetPositionXTextbox.text=
CoordinateDisplayTopComponent.targetPositionYTextbox.text=
CoordinateDisplayTopComponent.targetPositionZTextbox.text=
CoordinateDisplayTopComponent.transducerPositionButton.text=Transducer Coordinates:
CoordinateDisplayTopComponent.transducerPositionXTextbox.text=
CoordinateDisplayTopComponent.transducerPositionYTextbox.text=
CoordinateDisplayTopComponent.transducerPositionZTextbox.text=
CoordinateDisplayTopComponent.portForwardDownriggerStationButton.text=PF Station
CoordinateDisplayTopComponent.portMiddleDownriggerStationButton.text=PM Station
CoordinateDisplayTopComponent.portForwardCountTextbox.text=
CoordinateDisplayTopComponent.portMiddleCountTextbox.text=
CoordinateDisplayTopComponent.portAftCountTextbox.text=
CoordinateDisplayTopComponent.starboardAftCountTextbox.text=
CoordinateDisplayTopComponent.starboardMiddleCountTextbox.text=
CoordinateDisplayTopComponent.starboardForwardCountTextbox.text=
CoordinateDisplayTopComponent.portForwardTensionButton.text=PF line tension :
CoordinateDisplayTopComponent.portMiddleTensionButton.text=PM line tension :
CoordinateDisplayTopComponent.portAftTensionButton.text=PA line tension :
CoordinateDisplayTopComponent.starboardForwardTensionButton.text=SF line tension :
CoordinateDisplayTopComponent.starboardMiddleTensionButton.text=SM line tension :
CoordinateDisplayTopComponent.starboardAftTensionButton.text=SA line tension :
CoordinateDisplayTopComponent.portForwardSetCountsTextbox.text=Enter new counts...
CoordinateDisplayTopComponent.portAftSetCountsTextbox.text=Enter new counts...
CoordinateDisplayTopComponent.starboardForwardSetCountsTextbox.text=Enter new counts...
CoordinateDisplayTopComponent.starboardMiddleSetCountsTextbox.text=Enter new counts...
CoordinateDisplayTopComponent.starboardAftSetCountsTextbox.text=Enter new counts...
DownriggerStationUITopComponent.portForwardDownriggerStationButton.text=PF Line
CoordinateDisplayTopComponent.portForwardDownriggerLineLengthButton.text=Line length:
CoordinateDisplayTopComponent.portMiddleDownriggerLineLengthButton.text=Line length:
CoordinateDisplayTopComponent.portAftDownriggerLineLengthButton.text=Line length:
CoordinateDisplayTopComponent.starboardForwardDownriggerLineLengthButton.text=Line length:
CoordinateDisplayTopComponent.starboardMiddleDownriggerLineLengthButton.text=Line length:
CoordinateDisplayTopComponent.starboardAftDownriggerLineLengthButton.text=Line length:
CoordinateDisplayTopComponent.portForwardSetCountsButton.text=Set counts
CoordinateDisplayTopComponent.portMiddleSetCountsButton.text=Set counts
CoordinateDisplayTopComponent.portAftSetCountsButton.text=Set counts
CoordinateDisplayTopComponent.starboardForwardSetCountsButton.text=Set counts
CoordinateDisplayTopComponent.starboardMiddleSetCountsButton.text=Set counts
CoordinateDisplayTopComponent.starboardAftSetCountsButton.text=Set counts
CoordinateDisplayTopComponent.starboardAftDownriggerStationButton.text=SA Station
CoordinateDisplayTopComponent.starboardMiddleDownriggerStationButton.text=SM Station
CoordinateDisplayTopComponent.starboardForwardDownriggerStationButton.text=SF Station
CoordinateDisplayTopComponent.portAftDownriggerStationButton.text=PA Station
CoordinateDisplayTopComponent.portMiddleSetCountsTextbox.text=Enter new counts...
CoordinateDisplayTopComponent.clearPositionUILoggerButton.text=Clear logger
DownriggerStationUITopComponent.tensionSensorButton.text=Enable Tension Sensor
CoordinateDisplayTopComponent.clearPositionUILoggerButton.AccessibleContext.accessibleName=
CoordinateDisplayTopComponent.loadConfigurationButton.AccessibleContext.accessibleName=
CoordinateDisplayTopComponent.loadConfigurationButton.text=Load config file
NavigationControls.fullBeamAngleTextfieldInput.text=(degrees)
NavigationControls.fullBeamAngleButton.text=Full beam angle :
NavigationControls.starboardAftOutButton.text=SA OUT
NavigationControls.updatedButton.text=Activate
NavigationControls.starboardAftInButton.text=SA IN
NavigationControls.stopCalibrationButton.text=\u25a0
NavigationControls.starboardMiddleInButton.text=SM IN
NavigationControls.pauseCalibrationButton.text=\u258c\u258c
NavigationControls.starboardMiddleOutButton.text=SM OUT
NavigationControls.runCalibrationButton.text=\u25ba
NavigationControls.starboardForwardOutButton.text=SF OUT
NavigationControls.starboardForwardInButton.text=SF IN
NavigationControls.rightButton.text=
NavigationControls.sinkButton.text=
NavigationControls.portAftOutButton.text=PA OUT
NavigationControls.riseButton.text=
NavigationControls.portAftInButton.text=PA IN
NavigationControls.portMiddleInButton.text=PM IN
NavigationControls.aftButton.text=
NavigationControls.portMiddleOutButton.text=PM OUT
NavigationControls.aftLeftButton.text=
NavigationControls.portForwardOutButton.text=PF OUT
NavigationControls.leftButton.text=
NavigationControls.portForwardInButton.text=PF IN
NavigationControls.forwardLeftButton.text=
NavigationControls.forwardButton.text=
NavigationControls.navigatePositionZTextbox.text=Enter Z coord..
NavigationControls.forwardRightButton.text=
NavigationControls.navigatePositionYTextbox.text=Enter Y coord..
NavigationControls.navigatePositionXTextbox.text=Enter X coord..
NavigationControls.updateButton.text=UPDATE
CoordinateDisplayTopComponent.positionUILogger.text=Setup Instructions:\n\nStep 1: Make sure all downriggers are fully reeled at the time of powering on.  A failure to do so will result in a bad coordinate configuration.\nStep 2: Make sure the USB transceiver is connected to your computer.\nStep 3: Configure the serial port from the serial port configuration window. Refresh the ports by clicking the 'refresh' button and then select the port which is coupled to the transceiver. \nStep 4: Press the 'Scan' button located in the serial port configuration window and then wait twenty seconds for the devices to connect with EchoCal.\nStep 5: Load the vessel configuration file by clicking the 'Load cofig file' button just above this logger.\nStep 6: Configure each downrigger station by assigning a connected device with the selection box under the station label in the main window.\nStep 7: Navigate the sphere to the target coordinates using the navigation controls. \nStep 8: Scan the surrounding area and center the sphere on the echosounder view using the navigation controls.\nStep 9: Press the 'UPDATE' button once the sphere is centered on the view: This will copy the sphere coordinates to the target coordinates. The target coordinates represent the center of the sonar beam cross-section..\n\n
NavigationControls.navigateSphereToPositionButton.text=Navigate to position
DiagramTopComponent.topViewCoordinateSystemDiagram.text=
DiagramTopComponent.sideViewCoordinateSystemDiagram.text=
NavigationControls.starTypeButton.text=
NavigationControls.spiralTypeButton.text=
NavigationControls.gridTypeButton.text=
DiagramTopComponent.jLabel1.text=1 count = 0.185 meters
VesselConfigurationUITopComponent.vesselConfigurationGraphic1.text=
VesselConfigurationUITopComponent.vesselConfigurationGraphic2.text=
InstructionsTopComponent.instructionsTextArea.text=EchoCal Software\n\nThe EchoCal software is written in Java and it runs on Windows/Linux.  It was developed within the NetBeans platform and Java swing frameworks giving the user interface a clean and robust feel.  EchoCal comes bundled with its own JVM (Java virtual machine) so that other JVM versions which may already be installed on your terminal will not be modified or cause interference with EchoCal.  EchoCal is an executable program and so installation is extremely easy.  EchoCal was designed to handle three main tasks.  The first is that it grants users complete control over EchoCal hardware wireless.  The second task is that it provides position and hardware monitoring tools that grants users full access to the information associated with various aspects of the EchoCal system.  The third task is that it assists users with configuring calibration setups for various sea vessels by providing tools to do so.  The EchoCal software implements a model-view-controller scheme to simplify the organization of the user interface.  The user interface includes the \u2018Coordinate Display\u2019 window, the \u2018Navigation Controls\u2019 window, the \u2018Serial Port Configuration\u2019 window and the \u2018Vessel Configuration\u2019 window.  These components of the EchoCal software are essential and each will be used for a calibration.  \n\n\nCoordinate Display Window\n\nThe Coordinate Display window displays to the user all relevant information regarding the state of the calibration sphere\u2019s position and the geometry associated with the vessel configuration.  The coordinate display window also provides six \u2018Downrigger Station Controls\u2019 which provides all the tools necessary for configuring the downrigger stations.  There is a real-time logger available which displays various forms of information associated with calibration session.  \n\n\nDownrigger Station Controls\n\nThe downrigger station controls represent six sets of identical controls for each possible downrigger station.  A calibration session will utilize three downrigger stations.  The downrigger station controls are located above the coordinate gauges in the coordinate display window.  Each set of controls contain a downrigger count gauge, a count re-setter input field, a count re-setter button, a tension gauge and a downrigger station box selection menu.\n\n\nCount Re-setter Input Field / Button\n\nThe count re-setter and input field is located in each set of downrigger station controls.  It may be used to re-program the counts associated with a downrigger station.  Typically these controls are used for testing purposes and should not be used during calibration sessions however if power was somehow lost to the downrigger boxes then the count coordinates would reset to zero one power turned back on.  These controls allow the user to reprogram the counts perceived by the hardware so that the calibration session may continue without reeling the line in.  It is a good practice to write down the downrigger coordinates on a pad of paper in case EchoCal shuts down. \n\n\nVessel Configuration Gauge\n\nThe vessel configuration gauge is a vessel top view graphic located between the port and starboard downrigger station controls which indicates to the user the vessel configuration associated with the current calibration.\n\n\nTransducer Coordinates\n\nThe \u2018Transducer Coordinates\u2019 display gauges the transducer position in euclidean coordinates.  These coordinates along with all other are represented in downrigger \u2018count\u2019 units which are approximately equal to 0.185 meters.  These coordinates are simply available for reference but they are not directly essential to the calibration.  \n\n\nTarget Coordinates\n\nThe \u2018Target Coordinates\u2019 display gauges the \u2018echo gram target position\u2019 in euclidean coordinates which reflects the echo grams center point.  These coordinates along with all other are represented in downrigger \u2018count\u2019 units which are approximately equal to 0.185 meters. This position acts as a central reference point which the auto-calibration functions will requires to navigate around.  This position is automatically generated from a loaded vessel configuration file but it is essential that the user updates the target coordinates with the \u2018Update\u2019 button before any calibration session is initiated otherwise it will result in a poor calibration session.  The initial set of target coordinates generated from the loaded vessel configuration file represents a calculated set of target echo gram coordinates which are given to the user as a region to begin scanning until the calibration sphere has been spotted on the echo gram. It should be noted that the accuracy of the vessel configuration measurements directly reflect the accuracy of the initial target coordinates so vessel configuration measurements must be accurate.  The \u2018Update\u2019 button will copy the current position of the calibration sphere to the target coordinates so only press this button when the calibration sphere is centered on the echo gram view.\n\n\nSphere Coordinates\n\nThe \u2018Sphere Coordinates\u2019 display gauges the real-time calibration sphere position in euclidean coordinates.  These coordinates along with all other are represented in downrigger \u2018count\u2019 units which are approximately equal to 0.185 meters.  \n\n\nTension Sensor Toggle Button\n\nThe tension sensor toggle button switches the tension sensor on or off.  With the tension sensor active EchoCal will display the line tension for each downrigger station in it\u2019s respective downrigger station control set.  An active tension sensor will initiate an auto-pause sequence during an auto-calibration if the tension becomes too high.  This is a safety mechanism so that the lines don\u2019t break.  If tension persists, physically inspect the lines for material which may be catching the mono filament line.\n\n\nEchoCal Logger\n\nThe EchoCal logger provides real-time information associated with all forms of navigation and setup procedures.  It is located in the coordinate display window under the calibration mode button.\n\n                                                       \nThe Downrigger Coordinate System\n\nThe coordinate display and auto-navigation controller of the EchoCal user interface use a euclidean coordinate system to describe the relevant positions of key objects and locations.  These gauges are useful but the actual navigation related calculations are processed in a \u2018downrigger\u2019 coordinate system.  This downrigger coordinate system can be described as follows:  The length of each mono filament line from one pole-end of a downrigger to the point where the all lines meet describes a single downrigger coordinate.  The calibration sphere is not usually located at the point where the lines meet but are correlated and are only offset from one another in the z-dimension as a result of it\u2019s \u2018pigtail\u2019 configuration of lines.  The downrigger coordinate system makes use of the \u2018downrigger count\u2019 units which were designed to reflect the average adjustment of length per rudimentary reel function execution.  EchoCal and its foundational functionality is built from its implementation of reversible-transformation functions which interface euclidean and downrigger coordinates. The equations which transform the euclidean coordinates to downrigger coordinates are many times more efficient than the equations for the reverse transform since it only makes use of the Pythagorean theorem.  The conversion of downrigger coordinates back to euclidean coordinates uses a four-tier self-correcting approximation scheme which essentially works by feeding sample euclidean positions into the previous transform for the sake of locating the point which most closely produces the current downrigger coordinates after transformation; This process is repeated four times per coordinate update and with each iteration a more accurate euclidean point is calculated by checking nearby points. The calculations are processed in real time whenever \u2018Calibration Mode\u2019 is turned on.  Since these calculations are computationally expensive, calibration mode should only be turned on when the user is navigating the calibrations sphere.  Larger vessels will require more memory to calculate euclidean positions since a larger volume of underwater space will be processed. The \u2018Calibration Mode\u2019 toggle button is located in the coordinate display window just above the EchoCal logger.  Only when calibration mode is turned on will the calibration sphere coordinates be available in the coordinate display window.  Keep in mind that there is a third coordinate system in effect;  The \u2018Vessel Configuration\u2019 coordinate system.  The vessel configuration coordinate system is euclidean and can be thought of as a reference map or a set of constants associated with the geometrical configuration of downriggers as they were set up on the vessel.  These constants are generated from a \u2018Vessel Configuration\u2019 XML file and is needed for two reasons;  The first is to generate an initial estimate for the \u2018Target Echo gram\u2019 position and the second is to calculate the theoretical distance between the downriggers and the calibration sphere; theoretical downrigger coordinates.  The theoretical downrigger coordinates are measured against the actual downrigger coordinates during coordinate transformation as discussed before and uses the difference between the two sets of downrigger coordinates as a way to gauge accuracy of the coordinates generated in the coordinate display window.\n\n\nCreating A Vessel Configuration File\n\nA vessel configuration file is a file which contains information regarding the specific geometric configuration associated with the calibration setup. It provides information regarding the relative positions of each downrigger station, the ships transducer and an approximation of the echo gram target coordinates.  To create a vessel configuration file select the \u2018Vessel Configuration Tool\u2019 from the tools menu and try to obtain a copy of the vessel schematics if possible.  Depending on the configuration type chosen from the drop down menu on the left column will certain numerical inputs be provided.  The leftmost column asks for information regarding the height of the downriggers pole end to the ocean surface.  The distance from \u201c___\u201d to \u201c___\u201d fields are variable and change with the vessel configuration type selection. In the rightmost column the user enters the distance in meters in a straight line from the \u201c___\u201d to \u201c___\u201d downrigger stations.  The vessel width, transducer depth and target depth input fields refer to the distance of the vessels width, the depth of the transducer from the ocean surface and the estimated depth of the echo gram target coordinates in meters respectively.  The Transducer X offset input field refers to the distance in meters of the transducer from the Y axis which runs down the center of the ship.  The \u2018Downrigger Y Offset\u2019 input field label varies with the vessel configuration type selection and it asks for the distance along the Y axis from some downrigger to the transducer.  One finished, press the \u2018Save As...\u2019 button to prompt a path-to-save box.\n                \n\nLoading A Vessel Configuration File\n\nThe user can load a vessel configuration file with the \u2018Load Config button located in the coordinate display window and the vessel configuration window. It will prompt a path-to-load-from box and generate a set of coordinates for the transducer and target echo gram coordinates.\n\n\nSerial Port Configuration Window\n\nThe serial port configuration window was designed to help the user configure the serial port connected to the transceiver which communicates with EchoCal devices.  At startup the serial port configuration window may be accessed by the tools menu.  To connect to the devices, make sure the power is turned on for each device and the transceiver is plugged into the terminal that is running the EchoCal software.  Press the \u2018Refresh ports\u2019 button to query the available serial ports on your terminal and select the serial port from the drop-down menu located at the top.  Configure the serial port by selecting the characteristics available  below the \u2018Scan\u2019 button.  Press the \u2018Scan\u2019 button to connect to the EchoCal devices after configuring the port.  The \u2018Serial port configuration logger\u2019 will display the meta-data associated with the connection and after twenty seconds the connection process will be complete.  After completing this task you may close the serial port configuration window.  To change the properties of the serial port just open the serial port configuration window and repeat the process described in this section.\n\n\nNavigation Control Window\n\nThere are four types of navigation controllers worth classifying.  The rudimentary reeling controller, the virtual joystick controller, the auto-navigation controller and the auto-calibration controller.  All of these controllers are available in the \u2018Navigation Controls\u2019 window.  This along with the coordinate display window will serve as your main interface during calibration after the devices have been configured properly.\n\n\nRudimentary Reeling Controls\n\nThe \u2018rudimentary reeling controller\u2019 demonstrates the most basic set of navigation functionality EchoCal offers.  Every single navigation function is built from more complex manipulation of these particular functions.  Essentially a \u2018REEL IN\u2019 or \u2018REEL OUT\u2019 command will be available for each downrigger station which has been configured properly and they are located on the left and right of the virtual joystick.  There is a small built in delay which renders each button unusable as the downriggers are in a current state of motion.  Each execution of the reel commands will reel on average a single count unit.  The \u2018count\u2019 unit was invented for this reason; so that reel commands and count units are correlated.\n\n\nVirtual Joystick Controls\n\nThe \u2018virtual joystick\u2019 controls are located in between the two sets of \u2018rudimentary reeling\u2019 controls.  The joystick functionality can be understood in terms of the \u2018auto-navigation\u2019 function since it directly utilizes it;  Each directional button executes an \u2018auto-navigation\u2019 command and uses the calibration sphere position to calculate the intended coordinates of navigation.  Each directional button displaces the sphere to a nearby point from the calibration sphere position in the direction reflected by the directional button.  The directional buttons located in the center of the joystick reflect the rise and sink commands which displace the sphere in the z-axis only.\n\n\nAuto-Navigation Controls\n\nThe \u2018auto-navigation\u2019 controller is located at the bottom right hand side of the navigation controls and it consists of a coordinate input and a \u2018Navigate\u2019 button.  \u2019The \u2018Navigate\u2019 button should be used to displace the calibration sphere to a single position which is specified by the \u2018Navigation Coordinate Input\u2019 text fields.  Keep in mind that these coordinates are measured in \u2018count\u2019 units which were designed to simplify general navigation.  To input coordinates just enter a desired count number in each coordinate field.  Use the coordinate display window to get a general Idea where the target position is in reference to the calibration sphere.\n\nAuto-Calibration Controls\n\nThe \u2018auto-calibration\u2019 function is a handy function which has contributed most of the time saved by EchoCal.  This function builds an array of coordinates which fall inside the echo-gram view and essentially navigates the calibration sphere to them with the objective of hitting as many points as possible in the shortest time.  During development the goal of this function was to create a set of points which reduced the redundancy of travel distance by the calibration sphere so that more time was saved.  There are three modes of path generation for the auto-calibration function;  the star-type auto-calibration, the grid-type auto-calibration and the spiral-type auto-calibration.  Depending on various factors such as sea current speed and direction or ship size, one mode may work better than another.  The \u2018star\u2019, 'grid 'and \u2018spiral\u2019 make reference to the paths which the calibration sphere draws out when seen from the echo gram.  The star type auto-calibration is designed to span the diameter of the echo gram while slowly shifting the angular coordinate with respect to the X axis upon every full diameter span until the angular value reaches 360 degrees.  This will draw out a star pattern but only on calmer days will its shape become more distinct.  Interestingly enough, this function also has proven to be extremely valuable when the calibration sphere is lost from the echo grams view.  Unlike the spiral-type auto-calibration function, this one can scan large distances relatively quickly.  The spiral type function is more time efficient because it doesn't hit a single point redundantly however it should not be used when scanning the ocean since it would cover very little area compared to the star-type auto-calibration function.   The grid type auto-calibration is the most straightforward because the paths are easy to visualize on the echo-gram. These functions can be utilized with the \u2018auto-calibration\u2019 controller which is located directly above the \u2018auto-navigation\u2019 controller on the right hand side of the \u2018navigation controls\u2019 window.  The auto-calibration types may be chosen with the toggle buttons on the rightmost region of the navigation controls.  Before you can perform an auto-calibration session you must already know the full beam angle in degrees of the echo sounder because the cross-sectional area of the echo gram is dependent on it.  The \u2018full-beam-angle\u2019 input field will process this number upon execution of an auto-calibration function.  The second direct dependency of the auto-calibration functions is the \u2018UPDATED?\u2019 toggle-button which essentially asks the user if he/she has updated the target coordinates so that they are accurate.  This is essential since the auto-calibration functions utilize the target position as a reference point when generating a coordinate path array.  Weather or not the target coordinates are accurate (to which EchoCal has no ability to capture the information on its own), an auto-calibration function cannot begin without a pressed \u2018UPDATED\u2019 button.  The calibration progress bar located directly under the \u2018full-beam-angle\u2019 input field will indicate the user the auto-calibration progress.  The calibration sessions may be executed with the \u2018Play\u2019 button, paused with the \u2018Pause\u2019 button and stopped with the \u2018Stop\u2019 button as one would find on a audio-playback device.    
NavigationControls.text=
JoystickConfigurationTopComponent.jAxisPanel.border.title=Joystick Axes:
JoystickConfigurationTopComponent.jButtonPanel.border.title=Buttons:
JoystickConfigurationTopComponent.jHatSwitchPanel.border.title=Hat Switch:
JoystickConfigurationTopComponent.jEnableButton.text=Enable
JoystickConfigurationTopComponent.jLabel1.text=Devices:
JoystickConfigurationTopComponent.jLabel1.toolTipText=
JoystickConfigurationTopComponent.jComboBox_controllers.toolTipText=Select a Joystick.
JoystickConfigurationTopComponent.jEnableButton.toolTipText=Toggles Joystick control.
JoystickConfigurationTopComponent.jLabel2.text=X-Axis/Y-Axis
JoystickConfigurationTopComponent.jLabel2.toolTipText=
JoystickConfigurationTopComponent.jYField.text=50
JoystickConfigurationTopComponent.jXField.text=50
JoystickConfigurationTopComponent.jLabel3.text=X-Axis %:
JoystickConfigurationTopComponent.jLabel3.toolTipText=
JoystickConfigurationTopComponent.jLabel4.toolTipText=
JoystickConfigurationTopComponent.jLabel4.text=Y-Axis %:
JoystickConfigurationTopComponent.jYField.toolTipText=
NavigationControls.updatedButton.toolTipText=
